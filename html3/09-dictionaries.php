<?php if ( file_exists("../booktop.php") ) {
  require_once "../booktop.php";
  ob_start();
}?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>Untitled</title>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<h1 id="λεξικά">Λεξικά</h1>
<p>       </p>
<p>Ένα <em>λεξικό (dictionary)</em> είναι σαν μια λίστα, αλλά πιο γενικό. Σε μια λίστα, οι δείκτες θέσης πρέπει να είναι ακέραιοι, ενώ σε ένα λεξικό, οι δείκτες μπορούν να είναι (σχεδόν) οποιουδήποτε τύπου.</p>
<p>Μπορείτε να σκεφτείτε ένα λεξικό ως μια αντιστοίχιση μεταξύ ενός συνόλου δεικτών (που ονομάζονται <em>κλειδιά</em>) και ενός συνόλου τιμών. Κάθε κλειδί αντιστοιχίζεται σε μια τιμή. Η συσχέτιση ενός κλειδιού και μιας τιμής ονομάζεται <em>ζεύγος κλειδιού-τιμής (key-value pair)</em> ή μερικές φορές <em>στοιχείο</em>.</p>
<p>Για παράδειγμα, θα δημιουργήσουμε ένα λεξικό που αντιστοιχίζει λέξεις από τα αγγλικά στα ισπανικά, έτσι ώστε τα κλειδιά και οι τιμές να είναι όλα συμβολοσειρές.</p>
<p>Η συνάρτηση <code>dict</code> δημιουργεί ένα νέο λεξικό χωρίς στοιχεία. Επειδή το <code>dict</code> είναι το όνομα μιας ενσωματωμένης συνάρτησης, θα πρέπει να αποφύγετε τη χρήση του ως όνομα μεταβλητής.</p>
<p> </p>
<pre class="python trinket"><code>&gt;&gt;&gt; eng2sp = dict()
&gt;&gt;&gt; print(eng2sp)
{}</code></pre>
<p>Τα άγκυστρα, <code>{}</code>, αντιπροσωπεύουν ένα κενό λεξικό. Για να προσθέσετε στοιχεία στο λεξικό, μπορείτε να χρησιμοποιήσετε αγκύλες:</p>
<p> </p>
<pre class="python"><code>&gt;&gt;&gt; eng2sp[&#39;one&#39;] = &#39;uno&#39;</code></pre>
<p>Αυτή η γραμμή δημιουργεί ένα στοιχείο που αποτελείται από το κλειδί <code>'one'</code> και την τιμή “uno”. Εάν εκτυπώσουμε ξανά το λεξικό, βλέπουμε ένα ζεύγος κλειδιού-τιμής με άνω και κάτω τελεία μεταξύ του κλειδιού και της τιμής:</p>
<pre class="python"><code>&gt;&gt;&gt; print(eng2sp)
{&#39;one&#39;: &#39;uno&#39;}</code></pre>
<p>Αυτή η μορφή εξόδου είναι επίσης μια μορφή εισόδου. Για παράδειγμα, μπορείτε να δημιουργήσετε ένα νέο λεξικό με τρία στοιχεία. Αλλά αν εκτυπώσετε «eng2sp», ίσως εκπλαγείτε:</p>
<pre class="python"><code>&gt;&gt;&gt; eng2sp = {&#39;one&#39;: &#39;uno&#39;, &#39;two&#39;: &#39;dos&#39;, &#39;three&#39;: &#39;tres&#39;}
&gt;&gt;&gt; print(eng2sp)
{&#39;one&#39;: &#39;uno&#39;, &#39;three&#39;: &#39;tres&#39;, &#39;two&#39;: &#39;dos&#39;}</code></pre>
<p>Η σειρά των ζευγών κλειδιού-τιμής δεν είναι η ίδια. Στην πραγματικότητα, αν πληκτρολογήσετε το ίδιο παράδειγμα στον υπολογιστή σας, ενδέχεται να έχετε διαφορετικό αποτέλεσμα. Γενικά, η σειρά των στοιχείων σε ένα λεξικό είναι απρόβλεπτη.</p>
<p>Αλλά αυτό δεν είναι πρόβλημα γιατί τα στοιχεία ενός λεξικού δεν χρησιμοποιούν ποτέ ευρετήριο με ακέραιους δείκτες. Αντίθετα, χρησιμοποιείτε τα κλειδιά για να αναζητήσετε τις αντίστοιχες τιμές:</p>
<pre class="python"><code>&gt;&gt;&gt; print(eng2sp[&#39;two&#39;])
&#39;dos&#39;</code></pre>
<p>Το κλειδί <code>'two'</code> αντιστοιχεί πάντα στην τιμή “dos”, οπότε η σειρά των στοιχείων δεν έχει σημασία.</p>
<p>Εάν το κλειδί δεν υπάρχει στο λεξικό, λαμβάνετε μια εξαίρεση:</p>
<p>  </p>
<pre class="python"><code>&gt;&gt;&gt; print(eng2sp[&#39;four&#39;])
KeyError: &#39;four&#39;</code></pre>
<p>Η συνάρτηση <code>len</code> λειτουργεί σε λεξικά. Επιστρέφει το πλήθος των ζευγών κλειδιού-τιμής:</p>
<p> </p>
<pre class="python"><code>&gt;&gt;&gt; len(eng2sp)
3</code></pre>
<p>Ο τελεστής <code>in</code> λειτουργεί σε λεξικά. Σας λέει εάν κάτι εμφανίζεται ως <em>κλειδί</em> στο λεξικό (η εμφάνιση ως τιμή δεν αρκεί).</p>
<p>  </p>
<pre class="python"><code>&gt;&gt;&gt; &#39;one&#39; in eng2sp
True
&gt;&gt;&gt; &#39;uno&#39; in eng2sp
False</code></pre>
<p>Για να δείτε εάν κάτι εμφανίζεται ως τιμή σε ένα λεξικό, μπορείτε να χρησιμοποιήσετε τη μέθοδο <code>values</code>, η οποία επιστρέφει τις τιμές ως έναν τύπο dict_values, που μπορεί να μετατραπεί σε λίστα και, στη συνέχεια, μπορείτε να χρησιμοποιήσετε τον τελεστή <code>in</code> (την Python 2 η μέθοδος <code>values</code> επιστρέφει μία λίστα των τιμών):</p>
<p> </p>
<pre class="python"><code>&gt;&gt;&gt; vals = list(eng2sp.values())
&gt;&gt;&gt; &#39;uno&#39; in vals
True</code></pre>
<p>Ο τελεστής <code>in</code> χρησιμοποιεί διαφορετικούς αλγόριθμους για λίστες και για λεξικά. Για λίστες, χρησιμοποιεί έναν αλγόριθμο γραμμικής αναζήτησης. Καθώς η λίστα μεγαλώνει, ο χρόνος αναζήτησης μεγαλώνει σε ευθεία αναλογία με το μήκος της λίστας. Για τα λεξικά, η Python χρησιμοποιεί έναν αλγόριθμο που ονομάζεται <em>πίνακες κατακερµατισµού (hash table)</em> που έχει μια αξιοσημείωτη ιδιότητα: ο τελεστής <code>in</code> χρειάζεται περίπου τον ίδιο χρόνο ανεξάρτητα από το πόσα στοιχεία περιέχονται σε ένα λεξικό. Δεν θα εξηγήσω γιατί οι συναρτήσεις κατακερματισμού είναι τόσο μαγικές, αλλά μπορείτε να διαβάσετε περισσότερα για αυτό στο <a href="https://wikipedia.org/wiki/Hash_table">wikipedia.org/wiki/Hash_table</a>.</p>
<p>   </p>
<p><strong>Άσκηση 1: Κατεβάστε ένα αντίγραφο του αρχείου</strong> <a href="http://www.gr.py4e.com/code3/words.txt">www.gr.py4e.com/code3/words.txt</a></p>
<p><strong>Γράψτε ένα πρόγραμμα που να διαβάζει τις λέξεις στο <em>words.txt</em> και να τις αποθηκεύει ως κλειδιά σε ένα λεξικό. Δεν έχει σημασία ποιες είναι οι τιμές. Στη συνέχεια, μπορείτε να χρησιμοποιήσετε τον τελεστή <code>in</code> ως έναν γρήγορο τρόπο για να ελέγξετε εάν μια συμβολοσειρά υπάρχει στο λεξικό.</strong></p>
<h2 id="το-λεξικό-ως-σύνολο-μετρητών">Το λεξικό ως σύνολο μετρητών</h2>
<p></p>
<p>Ας υποθέσουμε ότι σας δίνεται μια συμβολοσειρά και θέλετε να μετρήσετε πόσες φορές εμφανίζεται κάθε γράμμα. Υπάρχουν διάφοροι τρόποι για να το κάνετε:</p>
<ol type="1">
<li><p>Θα μπορούσατε να δημιουργήσετε 26 μεταβλητές, μία για κάθε γράμμα του αλφαβήτου. Στη συνέχεια, θα μπορούσατε να διασχίσετε τη συμβολοσειρά και, για κάθε χαρακτήρα, να αυξήσετε τον αντίστοιχο μετρητή, πιθανώς χρησιμοποιώντας μια πολλαπλή συνθήκη.</p></li>
<li><p>Θα μπορούσατε να δημιουργήσετε μια λίστα με 26 στοιχεία. Στη εια, να μετατρέψετε κάθε χαρακτήρα σε έναν αριθμό (χρησιμοποιώντας την ενσωματωμένη συνάρτηση <code>ord</code>), να χρησιμοποιήσετε τον αριθμό ως δείκτη στη λίστα και να αυξήσετε τον κατάλληλο μετρητή.</p></li>
<li><p>Θα μπορούσατε να δημιουργήσετε ένα λεξικό με χαρακτήρες ως κλειδιά και μετρητές ως τις αντίστοιχες τιμές. Την πρώτη φορά που εντοπίζετε έναν χαρακτήρα, προσθέτετε ένα στοιχείο στο λεξικό. Στη συνέχεια θα αυξάνετε την τιμή του υπάρχοντος στοιχείου.</p></li>
</ol>
<p>Κάθε μία από αυτές τις επιλογές εκτελεί τον ίδιο υπολογισμό, αλλά καθεμία από αυτές υλοποιεί τον υπολογισμό με διαφορετικό τρόπο.</p>
<p></p>
<p>Μια <em>υλοποίηση</em> είναι ένας τρόπος εκτέλεσης ενός υπολογισμού. Ορισμένες υλοποιήσεις είναι καλύτερες από άλλες. Για παράδειγμα, ένα πλεονέκτημα της εφαρμογής του λεξικού είναι ότι δεν χρειάζεται να γνωρίζουμε εκ των προτέρων ποια γράμματα εμφανίζονται στη συμβολοσειρά και δημιουργούμε θέσεις μόνο για τα γράμματα που εμφανίζονται.</p>
<p>Εδώ είναι µια πιθανή εκδοχή του κώδικα:</p>
<pre class="python trinket"><code>word = &#39;brontosaurus&#39;
d = dict()
for c in word:
    if c not in d:
        d[c] = 1
    else:
        d[c] = d[c] + 1
print(d)</code></pre>
<p>Υπολογίζουμε ουσιαστικά ένα <em>ιστόγραμμα</em>, το οποίο είναι ένας στατιστικός όρος για ένα σύνολο μετρητών (ή συχνοτήτων).</p>
<p>  </p>
<p>Ο βρόχος <code>for</code> διασχίζει τη συμβολοσειρά. Κάθε φορά μέσω του βρόχου, εάν ο χαρακτήρας <code>c</code> δεν υπάρχει στο λεξικό, δημιουργούμε ένα νέο στοιχείο με το κλειδί <code>c</code> και την αρχική τιμή 1 (αφού έχουμε δει αυτό το γράμμα μία φορά). Εάν το <code>c</code> είναι ήδη στο λεξικό, αυξάνουμε το <code>d[c]</code>.</p>
<p></p>
<p>Ακολουθεί η έξοδος του προγράμματος:</p>
<pre class="{text}"><code>{&#39;a&#39;: 1, &#39;b&#39;: 1, &#39;o&#39;: 2, &#39;n&#39;: 1, &#39;s&#39;: 2, &#39;r&#39;: 2, &#39;u&#39;: 2, &#39;t&#39;: 1}</code></pre>
<p>Το ιστόγραμμα δείχνει ότι τα γράμματα “a” και “b” εμφανίζονται από μία φορά. Το “o” εμφανίζεται δύο φορές και ούτω καθεξής.</p>
<p> </p>
<p>Τα λεξικά έχουν μια μέθοδο που ονομάζεται <code>get</code>, που παίρνει ένα κλειδί και μια προεπιλεγμένη τιμή. Εάν το κλειδί εμφανίζεται στο λεξικό, το <code>get</code> επιστρέφει την αντίστοιχη τιμή, διαφορετικά επιστρέφει την προεπιλεγμένη τιμή. Για παράδειγμα:</p>
<pre class="python trinket"><code>&gt;&gt;&gt; counts = { &#39;chuck&#39; : 1 , &#39;annie&#39; : 42, &#39;jan&#39;: 100}
&gt;&gt;&gt; print(counts.get(&#39;jan&#39;, 0))
100
&gt;&gt;&gt; print(counts.get(&#39;tim&#39;, 0))
0</code></pre>
<p>Μπορούμε να χρησιμοποιήσουμε την <code>get</code> για να γράψουμε πιο συνοπτικά τον βρόχο ιστογράμματος. Επειδή η μέθοδος <code>get</code> χειρίζεται αυτόματα την περίπτωση που ένα κλειδί δεν περιέχεται στο λεξικό, μπορούμε να αντικαταστήσουμε τέσσερις γραμμές με μία και να εξαλείψουμε την εντολή <code>if</code>.</p>
<pre class="python"><code>word = &#39;brontosaurus&#39;
d = dict()
for c in word:
    d[c] = d.get(c,0) + 1
print(d)</code></pre>
<p>Η χρήση της μεθόδου <code>get</code>, για την απλοποίηση αυτού του βρόχου μέτρησης καταλήγει σε ένα πολύ συχνά χρησιμοποιούμενο “ιδίωμα” στην Python που θα το χρησιμοποιήσουμε πολλές φορές στο υπόλοιπο βιβλίο. Θα πρέπει λοιπόν να αφιερώσετε λίγο χρόνο και να συγκρίνετε τον βρόχο που χρησιμοποιεί την εντολή <code>if</code> και τον τελεστή <code>in</code> με τον βρόχο που χρησιμοποιεί τη μέθοδο <code>get</code>. Κάνουν ακριβώς το ίδιο πράγμα, αλλά ο δεύτερος είναι συνοπτικότερος.</p>
<p></p>
<h2 id="λεξικά-και-αρχεία">Λεξικά και αρχεία</h2>
<p>Μία από τις συνησμένες χρήσεις ενός λεξικού είναι να μετράει την εμφάνιση λέξεων σε ένα αρχείο, που περιέχει κείμενο. Ας ξεκινήσουμε με ένα πολύ απλό αρχείο λέξεων, βγαλμένών από το κείμενο του <em>Ρωμαίος και Ιουλιέτα (Romeo and Juliet)</em>.</p>
<p>Για το πρώτο σύνολο παραδειγμάτων, θα χρησιμοποιήσουμε μια σύντομη και απλοποιημένη έκδοση του κειμένου, χωρίς σημεία στίξης. Αργότερα θα δουλέψουμε με το κείμενο της σκηνής με σημεία στίξης.</p>
<pre><code>But soft what light through yonder window breaks
It is the east and Juliet is the sun
Arise fair sun and kill the envious moon
Who is already sick and pale with grief</code></pre>
<p>Θα γράψουμε ένα πρόγραμμα Python για να διαβάσουμε τις γραμμές του αρχείου, θα διασπάσουμε κάθε γραμμή σε μια λίστα λέξεων και, στη συνέχεια, με βρόχο θα διατρέξουμε κάθε μία από τις λέξεις της γραμμής και θα μετρήσουμε κάθε λέξη χρησιμοποιώντας ένα λεξικό.</p>
<p> </p>
<p>Θα δείτε ότι έχουμε δύο βρόχους <code>for</code>. Ο εξωτερικός βρόχος διαβάζει τις γραμμές του αρχείου και ο εσωτερικός βρόχος διατρέχει κάθε μία από τις λέξεις στη συγκεκριμένη γραμμή. Αυτό είναι ένα παράδειγμα ενός μοτίβου που ονομάζεται <em>εμφωλευμένοι βρόχοι</em> επειδή ένας από τους βρόχους είναι ο <em>εξωτερικός</em> βρόχος και ο άλλος βρόχος είναι ο <em>εσωτερικός</em>.</p>
<p>Επειδή ο εσωτερικός βρόχος εκτελεί όλες τις επαναλήψεις του κάθε φορά που ο εξωτερικός βρόχος κάνει μία επανάληψη, θεωρούμε ότι ο εσωτερικός βρόχος επαναλαμβάνεται “πιο γρήγορα” και ο εξωτερικός βρόχος επαναλαμβάνεται πιο αργά.</p>
<p> </p>
<p>Ο συνδυασμός των δύο εμφψλευμένων βρόχων διασφαλίζει ότι θα μετράμε κάθε λέξη, σε κάθε γραμμή του αρχείου εισόδου.</p>
<pre class="python"><code>fname = input(&#39;Εισαγάγετε το όνομα του αρχείου: &#39;)
try:
    fhand = open(fname)
except:
    print(&#39;Δεν είναι δυνατό το άνοιγμα του αρχείου:&#39;, fname)
    exit()

πλήθη = dict()
for γραμμή in fhand:
    λέξεις = γραμμή.split()
    for λέξη in λέξεις:
        if λέξη not in πλήθη:
            πλήθη[λέξη] = 1
        else:
            πλήθη[λέξη] += 1

print(πλήθη)

# Code: http://www.py4e.com/code3/count1.py</code></pre>

<p>Στη δήλωση <code>else</code>, χρησιμοποιούμε την πιο συμπαγή εναλλακτική για την αύξηση μιας μεταβλητής. Το <code>counts[word] += 1</code> ισοδυναμεί με <code>counts[word] = counts[word] + 1</code>. Και οι δύο τρόποι μπορούν να χρησιμοποιηθούν για την αλλαγή της τιμής μιας μεταβλητής κατά οποιοδήποτε, επιθυμητό, ποσό. Παρόμοιες εναλλακτικές υπάρχουν για τα <code>-=</code>, <code>*=</code> και <code>/=</code>.</p>
<p>Όταν εκτελούμε το πρόγραμμα, βλέπουμε μια ακατέργαστη έξοδο όλων των μετρήσεων, σε μη ταξινομημένη σειρά. (Το αρχείο <em>romeo.txt</em> είναι διαθέσιμο στη διεύθυνση <a href="http://www.py4e.com/code3/romeo.txt">www.py4e.com/code3/romeo.txt</a>)</p>
<pre><code>python count1.py
Εισαγάγετε το όνομα του αρχείου: romeo.txt
{&#39;and&#39;: 3, &#39;envious&#39;: 1, &#39;already&#39;: 1, &#39;fair&#39;: 1,
&#39;is&#39;: 3, &#39;through&#39;: 1, &#39;pale&#39;: 1, &#39;yonder&#39;: 1,
&#39;what&#39;: 1, &#39;sun&#39;: 2, &#39;Who&#39;: 1, &#39;But&#39;: 1, &#39;moon&#39;: 1,
&#39;window&#39;: 1, &#39;sick&#39;: 1, &#39;east&#39;: 1, &#39;breaks&#39;: 1,
&#39;grief&#39;: 1, &#39;with&#39;: 1, &#39;light&#39;: 1, &#39;It&#39;: 1, &#39;Arise&#39;: 1,
&#39;kill&#39;: 1, &#39;the&#39;: 3, &#39;soft&#39;: 1, &#39;Juliet&#39;: 1}</code></pre>
<p>Είναι λίγο άβολο να ψάξουμε μέσα στο λεξικό για να βρούμε τις πιο συχνά επαναλαμβανόμενες λέξεις και τον πλήθος των εμφανίσεών τους, γι’ αυτό πρέπει να προσθέσουμε λίγο ακόμα κώδικα Python για να έχουμε μια έξοδο που θα είναι πιο εύχρηστη.</p>
<h2 id="βρόχοι-και-λεξικά">Βρόχοι και λεξικά</h2>
<p>  </p>
<p>Εάν χρησιμοποιείτε ένα λεξικό ως ακολουθία μιας εντολής <code>for</code>, τότε αυτή διασχίζει τα κλειδιά του λεξικού. Για παράδειγμα, αυτός ο βρόχος εκτυπώνει κάθε κλειδί και την αντίστοιχη τιμή:</p>
<pre class="python"><code>counts = { &#39;chuck&#39; : 1 , &#39;annie&#39; : 42, &#39;jan&#39;: 100}
for key in counts:
    print(key, counts[key])</code></pre>
<p>Δείτε τί παράγεται στην έξοδο:</p>
<pre class="{text}"><code>jan 100
chuck 1
annie 42</code></pre>
<p>Και πάλι, τα κλειδιά δεν είναι ταξινομημένα.</p>
<p></p>
<p>Μπορούμε να χρησιμοποιήσουμε αυτό το μοτίβο για να εφαρμόσουμε τα διάφορα ιδιώματα βρόχου που περιγράψαμε νωρίτερα. Για παράδειγμα, αν θέλαμε να βρούμε όλες τις εγγραφές σε ένα λεξικό με τιμή πάνω από δέκα, θα μπορούσαμε να γράψουμε τον ακόλουθο κώδικα:</p>
<pre class="python"><code>counts = { &#39;chuck&#39; : 1 , &#39;annie&#39; : 42, &#39;jan&#39;: 100}
for key in counts:
    if counts[key] &gt; 10 :
        print(key, counts[key])</code></pre>
<p>Ο βρόχος <code>for</code> επαναλαμβάνεται μέσω των <em>κλειδιών</em> του λεξικού, επομένως πρέπει να χρησιμοποιήσουμε τον τελεστή ευρετηρίου για να ανακτήσουμε την αντίστοιχη <em>τιμή</em> για κάθε κλειδί. Δείτε πώς φαίνεται η έξοδος:</p>
<pre class="{text}"><code>jan 100
annie 42</code></pre>
<p>Βλέπουμε μόνο τις εγγραφές με τιμή πάνω από 10.</p>
<p> </p>
<p>Εάν θέλετε να εκτυπώσετε τα κλειδιά με αλφαβητική σειρά, πρέπει να κάνετε πρώτα μια λίστα με τα κλειδιά του λεξικού, χρησιμοποιώντας τη μέθοδο <code>keys</code>, που είναι διαθέσιμη για αντικείμενα λεξικού και, στη συνέχεια, να ταξινομήστε τη λίστα και να τη διασχίσετε, αναζητώντας κάθε κλειδί και να εκτυπώσετε ζεύγη κλειδιών-τιμών ταξινομημένα, ως εξής:</p>
<pre class="python"><code>counts = { &#39;chuck&#39; : 1 , &#39;annie&#39; : 42, &#39;jan&#39;: 100}
lst = list(counts.keys())
print(lst)
lst.sort()
for key in lst:
    print(key, counts[key])</code></pre>
<p>Δείτε πώς φαίνεται η έξοδος:</p>
<pre><code>[&#39;jan&#39;, &#39;chuck&#39;, &#39;annie&#39;]
annie 42
chuck 1
jan 100</code></pre>
<p>Πρώτα βλέπετε τη λίστα των κλειδιών σε μη ταξινομημένη σειρά, όπως τη λαμβάνουμε από τη μέθοδο <code>keys</code>. Στη συνέχεια, βλέπουμε τα ζεύγη κλειδιού-τιμής ταξινομημένα από τον βρόχο <code>for</code>.</p>
<h2 id="προχωρημένη-ανάλυση-κειμένου">Προχωρημένη ανάλυση κειμένου</h2>
<p> </p>
<p>Στο παραπάνω παράδειγμα, χρησιμοποιώντας το αρχείο <em>romeo.txt</em>, απλοποιήσαμε το αρχείο, αφαιρώντας όλα τα σημεία στίξης με το χέρι. Το πραγματικό κείμενο έχει πολλά σημεία στίξης, όπως φαίνεται παρακάτω.</p>
<pre class="{text}"><code>But, soft! what light through yonder window breaks?
It is the east, and Juliet is the sun.
Arise, fair sun, and kill the envious moon,
Who is already sick and pale with grief,</code></pre>
<p>Μιας και η συνάρτηση <code>split</code>, της Python, αναζητά κενά και αντιμετωπίζει τις λέξεις ως διακριτικά που χωρίζονται με κενά, θα αντιμετωπίζαμε τις λέξεις “soft!” και “soft” ως <em>διαφορετικές</em> λέξεις και θα δημιουργούνταν μια ξεχωριστή καταχώρηση λεξικού για κάθε μια από αυτές τις λέξεις.</p>
<p>Επίσης, δεδομένου ότι το αρχείο έχει κεφαλαία και πεζά γράμματα, θα αντιμετωπίζαμε το “who” και το “Who” ως διαφορετικές λέξεις, με διαφορετικές μετρήσεις.</p>
<p>Μπορούμε να λύσουμε και τα δύο αυτά προβλήματα χρησιμοποιώντας τις μεθόδους συμβολοσειράς <code>lower</code>, <code>punctuation</code> και <code>translate</code>. Η <code>translate</code> είναι η πιο λεπτή από τις μεθόδους. Ακολουθεί η τεκμηρίωση για την <code>translate</code>:</p>
<p><code>line.translate(str.maketrans(fromstr, tostr, deletestr))</code></p>
<p><em>Αντικαταστήστε τους χαρακτήρες που περιλαμβάνονται στο <code>fromstr</code> με τον αντίστοιχο χαρακτήρα του <code>tostr</code> και διαγράψτε όλους τους χαρακτήρες που βρίσκονται στο <code>deletestr</code>. Το <code>fromstr</code> και το <code>tostr</code> μπορεί να είναι κενές συμβολοσειρές και η παράμετρος <code>deletestr</code> μπορεί να παραλειφθεί.</em></p>
<p>Δεν θα καθορίσουμε το <code>tostr</code>, αλλά θα χρησιμοποιήσουμε την παράμετρο <code>deletestr</code> για να διαγράψουμε όλα τα σημεία στίξης. Ακόμη, θα αφήσουμε την Python να μας πει τη λίστα των χαρακτήρων, που θεωρεί “σημεία στίξης”:</p>
<pre class="python"><code>&gt;&gt;&gt; import string
&gt;&gt;&gt; string.punctuation
&#39;!&quot;#$%&amp;\&#39;()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~&#39;</code></pre>
<p>Οι παράμετροι της <code>translate</code> ήταν διαφορετικές στην Python 2.0.</p>
<p>Κάνουμε τις ακόλουθες τροποποιήσεις στο πρόγραμμά μας:</p>
<pre class="python"><code>import string

fname = input(&#39;Εισαγάγετε το όνομα του αρχείου: &#39;)
try:
    fhand = open(fname)
except:
    print(&#39;Δεν είναι δυνατό το άνοιγμα του αρχείου:&#39;, fname)
    exit()

πλήθη = dict()
for γραμμή in fhand:
    γραμμή = γραμμή.rstrip()
    γραμμή = γραμμή.translate(γραμμή.maketrans(&#39;&#39;, &#39;&#39;, string.punctuation))
    γραμμή = γραμμή.lower()
    λέξεις = γραμμή.split()
    for λέξη in λέξεις:
        if λέξη not in πλήθη:
            πλήθη[λέξη] = 1
        else:
            πλήθη[λέξη] += 1

print(πλήθη)

# Code: http://www.py4e.com/code3/count2.py</code></pre>

<p>Μέρος της εκμάθησης της “Τέχνης της Python” ή της “Python-ικής Σκέψης” είναι η συνειδητοποίηση ότι η Python έχει συχνά ενσωματωμένες δυνατότητες για πολλά κοινά προβλήματα ανάλυσης δεδομένων. Με τον καιρό, θα δείτε αρκετά παράδειγματα κώδικα και θα διαβάσετε αρκετά την τεκμηρίωση, για να ξέρετε πού να ψάξετε, προκειμένου να ελέγξετε εάν κάποιος έχει ήδη γράψει κάτι που κάνει τη δουλειά σας πολύ πιο εύκολη.</p>
<p>Η παρακάτω είναι μια συντομευμένη έκδοση της εξόδου:</p>
<pre class="{text}"><code>Εισαγάγετε το όνομα του αρχείου: romeo-full.txt
{&#39;swearst&#39;: 1, &#39;all&#39;: 6, &#39;afeard&#39;: 1, &#39;leave&#39;: 2, &#39;these&#39;: 2,
&#39;kinsmen&#39;: 2, &#39;what&#39;: 11, &#39;thinkst&#39;: 1, &#39;love&#39;: 24, &#39;cloak&#39;: 1,
a&#39;: 24, &#39;orchard&#39;: 2, &#39;light&#39;: 5, &#39;lovers&#39;: 2, &#39;romeo&#39;: 40,
&#39;maiden&#39;: 1, &#39;whiteupturned&#39;: 1, &#39;juliet&#39;: 32, &#39;gentleman&#39;: 1,
&#39;it&#39;: 22, &#39;leans&#39;: 1, &#39;canst&#39;: 1, &#39;having&#39;: 1, ...}</code></pre>
<p>Η αναζήτηση σε αυτήν της εξόδου εξακολουθεί να είναι δυσκίνητη. Μπορούμε όμως να χρησιμοποιήσουμε την Python για να μας δώσει ακριβώς αυτό που ψάχνουμε, αλλά για να το κάνουμε αυτό, πρέπει να μάθουμε για τις <em>πλειάδες</em> της Python. Θα συνεχίσουμε αυτό το παράδειγμα μόλις μάθουμε για τις πλειάδες.</p>
<h2 id="εκσφαλμάτωση">Εκσφαλμάτωση</h2>
<p></p>
<p>Καθώς εργάζεστε με μεγαλύτερα σύνολα δεδομένων, ο εντοπισμός σφαλμάτων μπορεί να γίνει δύσκολος με την εκτύπωση και τον έλεγχο των δεδομένων με το χειροκίνητα. Ακολουθούν ορισμένες προτάσεις για τον εντοπισμό σφαλμάτων σε μεγάλα συνόλα δεδομένων:</p>
<dl>
<dt>Μειώστε την είσοδο</dt>
<dd><p>Εάν είναι δυνατόν, μειώστε το μέγεθος του συνόλου δεδομένων. Για παράδειγμα, εάν το πρόγραμμα διαβάζει ένα αρχείο κειμένου, ξεκινήστε μόνο με τις πρώτες 10 γραμμές ή με ένα μικρότερο παράδειγμα, που μπορεί να βρείτε. Μπορείτε είτε να επεξεργαστείτε τα ίδια τα αρχεία, είτε (καλύτερα) να τροποποιήσετε το πρόγραμμα ώστε να διαβάζει μόνο τις πρώτες <code>n</code> γραμμές.</p>
<p>Εάν υπάρχει σφάλμα, μπορείτε να μειώσετε το <code>n</code> στη μικρότερη τιμή που εμφανίζει το σφάλμα και, στη συνέχεια, να το αυξήσετε σταδιακά, καθώς βρίσκετε και διορθώνετε τα σφάλματα.</p>
</dd>
<dt>Ελέγξτε τις περιλήψεις και τους τύπους</dt>
<dd><p>Αντί να εκτυπώσετε και να ελέγξετε ολόκληρο το σύνολο δεδομένων, σκεφτείτε να εκτυπώσετε περιλήψεις των δεδομένων: για παράδειγμα, τον αριθμό των στοιχείων σε ένα λεξικό ή το σύνολο μιας λίστας αριθμών.</p>
<p>Μια κοινή αιτία σφαλμάτων χρόνου εκτέλεσης είναι μια τιμή που δεν είναι του σωστού τύπου. Για τον εντοπισμό σφαλμάτων αυτού του είδους, συχνά αρκεί να εκτυπώσετε τον τύπο μιας τιμής.</p>
</dd>
<dt>Γράψτε αυτοελέγχους</dt>
<dd>Μερικές φορές μπορείτε να γράψετε κώδικα για να ελέγξετε αυτόματα για σφάλματα. Για παράδειγμα, εάν υπολογίζετε τον μέσο όρο μιας λίστας αριθμών, μπορείτε να ελέγξετε ότι το αποτέλεσμα δεν είναι μεγαλύτερο από το μέγιστο στοιχείο στη λίστα ή μικρότερο από το ελάχιστο. Αυτό ονομάζεται “έλεγχος λογικής”, επειδή εντοπίζει αποτελέσματα που είναι “παράλογα”.
</dd>
</dl>
<p>   </p>
<pre><code>Ένα άλλο είδος ελέγχου συγκρίνει τα αποτελέσματα δύο διαφορετικών
υπολογισμών για να δει αν είναι συνεπή. Αυτό ονομάζεται «έλεγχος
συνέπειας».</code></pre>
<dl>
<dt>Εκτυπώστε όμορφα το αποτέλεσμα (pprint)</dt>
<dd>Η μορφοποίηση της εξόδου εντοπισμού σφαλμάτων μπορεί να διευκολύνει τον εντοπισμό ενός σφάλματος.
</dd>
</dl>
<p>Και πάλι, ο χρόνος που αφιερώνετε στην μελέτη της κατασκευής του σκελετού του προγράμματος μπορεί να μειώσει τον χρόνο που αφιερώνετε στην αποσφαλμάτωση. </p>
<h2 id="γλωσσάριο">Γλωσσάριο</h2>
<dl>
<dt>αναζήτηση</dt>
<dd>Μια λειτουργία λεξικού που παίρνει ένα κλειδί και βρίσκει την αντίστοιχη τιμή.
</dd>
<dt>εμφωλευμένοι βρόχοι</dt>
<dd>Όταν υπάρχουν ένας ή περισσότεροι βρόχοι ο ένας “μέσα” στον άλλο βρόχο. Ο εσωτερικός βρόχος εκτελείτε μέχρι να ολοκληρωθεί σε κάθε εκτέλεση του εξωτερικού βρόχου.
</dd>
<dt>ζεύγος κλειδιού-τιμής</dt>
<dd>Η αναπαράσταση της αντιστοίχισης ενός κλειδιού σε μια τιμή.
</dd>
<dt>ιστόγραμμα</dt>
<dd>Ένα σύνολο μετρητών.
</dd>
<dt>κλειδί</dt>
<dd>Ένα αντικείμενο που εμφανίζεται σε ένα λεξικό ως το πρώτο μέρος ενός ζεύγους κλειδιού-τιμής.
</dd>
<dt>λεξικό</dt>
<dd>Μια αντιστοίχιση από ένα σύνολο κλειδιών στις αντίστοιχες τιμές τους.
</dd>
<dt>πίνακας κατακερματισμού - hashtable</dt>
<dd>Ο αλγόριθμος που χρησιμοποιείται για την υλοποίηση λεξικών στην Python.
</dd>
<dt>στοιχείο</dt>
<dd>Ένα άλλο όνομα για ένα ζεύγος κλειδιού-τιμής.
</dd>
<dt>συνάρτηση κατακερματισμού - hash function</dt>
<dd>Μια συνάρτηση που χρησιμοποιείται από έναν πίνακα κατακερματισμού για τον υπολογισμό της θέσης ενός κλειδιού.
</dd>
<dt>τιμή</dt>
<dd>Ένα αντικείμενο που εμφανίζεται σε ένα λεξικό ως το δεύτερο μέρος ενός ζεύγους κλειδιού-τιμής. Αυτό είναι πιο συγκεκριμένο από την προηγούμενη χρήση της λέξης “τιμή”.
</dd>
<dt>υλοποίηση</dt>
<dd>Ένας τρόπος εκτέλεσης ενός υπολογισμού.
</dd>
</dl>
<h2 id="ασκήσεις">Ασκήσεις</h2>
<p><strong>Άσκηση 2: Γράψτε ένα πρόγραμμα που ταξινομεί κάθε μήνυμα αλληλογραφίας με βάση την ημέρα της εβδομάδας που ολοκληρώθηκε η παράδοση. Για να το κάνετε αυτό, αναζητήστε γραμμές που ξεκινούν με “From”, στη συνέχεια αναζητήστε την τρίτη λέξη και καταμετρήστε την κάθε μία από τις ημέρες της εβδομάδας. Στο τέλος του προγράμματος εκτυπώστε τα περιεχόμενα του λεξικού σας (η σειρά δεν έχει σημασία).</strong></p>
<p><strong>Δείγμα Γραμμής:</strong></p>
<pre class="{text}"><code>From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008</code></pre>
<p><strong>Δείγμα Εκτέλεσης:</strong></p>
<pre class="{text}"><code>python dow.py
Εισαγάγετε το όνομα του αρχείου: mbox-short.txt
{&#39;Fri&#39;: 20, &#39;Thu&#39;: 6, &#39;Sat&#39;: 1}</code></pre>
<p><strong>Άσκηση 3: Γράψτε ένα πρόγραμμα για να διαβάσετε ένα αρχείο καταγραφής αλληλογραφίας, δημιουργήστε ένα ιστόγραμμα χρησιμοποιώντας ένα λεξικό για να μετρήσετε πόσα μηνύματα έχουν προέλθει από κάθε διεύθυνση email και εκτυπώστε το λεξικό.</strong></p>
<pre class="{text}"><code>Εισαγάγετε το όνομα του αρχείου: mbox-short.txt
{&#39;gopal.ramasammycook@gmail.com&#39;: 1, &#39;louis@media.berkeley.edu&#39;: 3,
&#39;cwen@iupui.edu&#39;: 5, &#39;antranig@caret.cam.ac.uk&#39;: 1,
&#39;rjlowe@iupui.edu&#39;: 2, &#39;gsilver@umich.edu&#39;: 3,
&#39;david.horwitz@uct.ac.za&#39;: 4, &#39;wagnermr@iupui.edu&#39;: 1,
&#39;zqian@umich.edu&#39;: 4, &#39;stephen.marquard@uct.ac.za&#39;: 2,
&#39;ray@media.berkeley.edu&#39;: 1}</code></pre>
<p><strong>Άσκηση 4: Προσθέστε κώδικα στο προηγούμενο πρόγραμμα για να καταλάβετε ποιος έχει τα περισσότερα μηνύματα στο αρχείο. Αφού διαβάσετε όλα τα δεδομένα και το δημιουργήσετε το λεξικό, κοιτάξτε στο λεξικό χρησιμοποιώντας έναν βρόχο μέγιστου (βλ. Κεφάλαιο 5: Βρόχος μέγιστου και ελάχιστου), για να βρείτε ποιος έχει τα περισσότερα μηνύματα και να εκτυπώσετε πόσα μηνύματα έχει το άτομο αυτό.</strong></p>
<pre class="{text}"><code>Εισαγάγετε το όνομα του αρχείου: mbox-short.txt
cwen@iupui.edu 5

Εισαγάγετε το όνομα του αρχείου: mbox.txt
zqian@umich.edu 195</code></pre>
<p><strong>Άσκηση 5: Αυτό το πρόγραμμα καταγράφει το όνομα τομέα (αντί για τη διεύθυνση) από όπου στάλθηκε το μήνυμα, αντί από ποιον προήλθε το μήνυμα (δηλαδή ολόκληρη η διεύθυνση email) και μετρά το πλήθος των μηνυμάτων από τον τομέα αυτό. Στο τέλος του προγράμματος, εκτυπώστε τα περιεχόμενα του λεξικού σας.</strong></p>
<pre class="{text}"><code>python schoolcount.py
Εισαγάγετε το όνομα του αρχείου: mbox-short.txt
{&#39;media.berkeley.edu&#39;: 4, &#39;uct.ac.za&#39;: 6, &#39;umich.edu&#39;: 7,
&#39;gmail.com&#39;: 1, &#39;caret.cam.ac.uk&#39;: 1, &#39;iupui.edu&#39;: 8}</code></pre>
</body>
</html>
<?php if ( file_exists("../bookfoot.php") ) {
  $HTML_FILE = basename(__FILE__);
  $HTML = ob_get_contents();
  ob_end_clean();
  require_once "../bookfoot.php";
}?>
