<?php if ( file_exists("../booktop.php") ) {
  require_once "../booktop.php";
  ob_start();
}?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>Untitled</title>
  <style type="text/css">
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  </style>
</head>
<body>
<h1 id="αντικειμενοστραφής-προγραμματισμός">Αντικειμενοστραφής προγραμματισμός</h1>
<h2 id="διαχείριση-μεγαλύτερων-προγραμμάτων">Διαχείριση μεγαλύτερων προγραμμάτων</h2>
<p> </p>
<p>Στην αρχή αυτού του βιβλίου, καταλήξαμε σε τέσσερα βασικά μοτίβα προγραμματισμού τα οποία χρησιμοποιούμε για την κατασκευή προγραμμάτων:</p>
<ul>
<li>Δομή ακολουθίας</li>
<li>Δομή επιλογής (εντολές if)</li>
<li>Δομή επανάληψης (βρόχοι)</li>
<li>Αποθήκευση και επαναχρησιμοποίηση (συναρτήσεις)</li>
</ul>
<p>Σε επόμενα κεφάλαια, εξερευνήσαμε απλές μεταβλητές καθώς και δομές δεδομένων συλλογής όπως λίστες, πλειάδες και λεξικά.</p>
<p>Καθώς κατασκευάζουμε προγράμματα, σχεδιάζουμε δομές δεδομένων και γράφουμε κώδικα για να χειριστούμε αυτές τις δομές δεδομένων. Υπάρχουν πολλοί τρόποι για να γράψετε προγράμματα και μέχρι τώρα, πιθανότατα έχετε γράψει κάποια προγράμματα που “δεν ήταν τόσο κομψά” και άλλα προγράμματα που ήταν “πιο κομψά”. Παρόλο που τα προγράμματά σας μπορεί να είναι μικρά, αρχίζετε να βλέπετε πως η σύνταξη κώδικα εμπεριέχει και λίγη τέχνη και αισθητική.</p>
<p>Καθώς τα προγράμματα φτάνουν το μήκος εκατομμυρίων γραμμών, γίνεται όλο και πιο σημαντικό να γράφουμε κώδικα που είναι εύκολο να κατανοηθεί. Εάν εργάζεστε σε ένα πρόγραμμα εκατομμυρίων γραμμών, δεν μπορείτε ποτέ να κρατήσετε ολόκληρο το πρόγραμμα στο μυαλό σας ταυτόχρονα. Χρειαζόμαστε τρόπους για να χωρίσουμε μεγάλα προγράμματα σε πολλά μικρότερα κομμάτια, ώστε να έχουμε λιγότερα να εξετάσουμε κατά την επίλυση ενός προβλήματος, τη διόρθωση ενός σφάλματος ή την προσθήκη μιας νέας δυνατότητας.</p>
<p>Κατά κάποιον τρόπο, ο αντικειμενοστραφής προγραμματισμός είναι ένας τρόπος για να τακτοποιήσετε τον κώδικά σας έτσι ώστε να μπορείτε να εστιάσετε σε 50 γραμμές του κώδικα και να τον κατανοήσετε, ενώ αγνοείτε τις άλλες 999.950 γραμμές, προς το παρόν.</p>
<h2 id="ξεκινώντας">Ξεκινώντας</h2>
<p>Όπως και σε πολλές άλλες πτυχές του προγραμματισμού, είναι απαραίτητο να μάθετε τις έννοιες του αντικειμενοστρεφούς προγραμματισμού προτού μπορέσετε να τις χρησιμοποιήσετε αποτελεσματικά. Θα πρέπει να προσεγγίσετε αυτό το κεφάλαιο ως έναν τρόπο για να μάθετε ορισμένους όρους και έννοιες και να επεξεργαστείτε μερικά απλά παραδείγματα, για να θέσετε τα θεμέλια της μελλοντικής μάθησης.</p>
<p>Το βασικό που πρέπει να αποκομήσετε από αυτό το κεφαλαίο είναι να αποκτήσετε μια στοιχειώδη κατανόηση του πώς κατασκευάζονται τα αντικείμενα και πώς λειτουργούν και κυρίως πώς χρησιμοποιούμε τις δυνατότητες των αντικειμένων, που μας παρέχονται από την Python και τις βιβλιοθήκες της Python.</p>
<h2 id="χρήση-αντικειμένων">Χρήση αντικειμένων</h2>
<p>Όπως αποδεικνύεται, χρησιμοποιούσαμε αντικείμενα σε αυτό το βιβλίο. Η Python μας παρέχει πολλά ενσωματωμένα αντικείμενα. Εδώ είναι ένας απλός κώδικας όπου οι πρώτες γραμμές θα πρέπει να σας φαίνονται πολύ απλές και φυσικές.</p>
<p></p>
<pre class="python"><code>stuff = list()
stuff.append(&#39;python&#39;)
stuff.append(&#39;chuck&#39;)
stuff.sort()
print (stuff[0])
print (stuff.__getitem__(0))
print (list.__getitem__(stuff,0))

# Code: http://www.py4e.com/code3/party1.py</code></pre>
<p>Αντί να εστιάσουμε στο τι επιτυγχάνουν αυτές οι γραμμές, ας δούμε τι πραγματικά συμβαίνει, από την άποψη του αντικειμενοστρεφούς προγραμματισμού. Μην ανησυχείτε εάν οι παρακάτω παράγραφοι δεν έχουν νόημα την πρώτη φορά που τις διαβάζετε, επειδή δεν έχουμε ορίσει ακόμη όλους αυτούς τους όρους.</p>
<p>Η πρώτη γραμμή <em>κατασκευάζει</em> ένα αντικείμενο τύπου <code>list</code> (λίστα), η δεύτερη και η τρίτη γραμμή <em>καλούν</em> τη <em>μέθοδο</em> <code>append()</code>, η τέταρτη γραμμή καλεί τη μέθοδο <code>sort()</code> και η πέμπτη γραμμή <em>ανακτά</em> το στοιχείο στη θέση 0.</p>
<p>Η έκτη γραμμή καλεί τη μέθοδο <code>__getitem__()</code> στη λίστα <code>stuff</code> με παράμετρο μηδέν.</p>
<pre class="python"><code>print (stuff.__getitem__(0))</code></pre>
<p>Η έβδομη γραμμή είναι ένας ακόμη πιο αναλυτικός τρόπος ανάκτησης του 0ου στοιχείου στη λίστα.</p>
<pre class="python"><code>print (list.__getitem__(stuff,0))</code></pre>
<p>Σε αυτόν τον κώδικα, καλούμε τη μέθοδο <code>__getitem__</code> στην κλάση <code>list</code> και <em>περνάμε</em> τη λίστα και το στοιχείο, που θέλουμε να ανακτηθεί από τη λίστα, ως παραμέτρους.</p>
<p>Οι τρεις τελευταίες γραμμές του προγράμματος είναι ισοδύναμες, αλλά είναι πιο βολικό να χρησιμοποιήσετε απλώς τη σύνταξη της αγκύλης, για να ζητήσετε ένα στοιχείο σε μια συγκεκριμένη θέση μιας λίστας.</p>
<p>Μπορούμε να ρίξουμε μια ματιά στις δυνατότητες ενός αντικειμένου κοιτάζοντας την έξοδο της συνάρτησης <code>dir()</code>:</p>
<pre class="{text}"><code>    &gt;&gt;&gt; stuff = list()
    &gt;&gt;&gt; dir(stuff)
    [&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;,
    &#39;__delitem__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;,
    &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;,
    &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;, &#39;__imul__&#39;, &#39;__init__&#39;,
    &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mul__&#39;,
    &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;,
    &#39;__repr__&#39;, &#39;__reversed__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;,
    &#39;__setitem__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;,
    &#39;append&#39;, &#39;clear&#39;, &#39;copy&#39;, &#39;count&#39;, &#39;extend&#39;, &#39;index&#39;,
    &#39;insert&#39;, &#39;pop&#39;, &#39;remove&#39;, &#39;reverse&#39;, &#39;sort&#39;]
    &gt;&gt;&gt;</code></pre>
<p>Το υπόλοιπο αυτού του κεφαλαίου θα ορίσει όλους τους παραπάνω όρους, επομένως φροντίστε να επιστρέψετε αφού ολοκληρώσετε το κεφάλαιο και να διαβάσετε ξανά τις παραπάνω παραγράφους για να ελέγξετε την κατανόησή σας.</p>
<h2 id="ξεκινώντας-με-προγράμματα">Ξεκινώντας με προγράμματα</h2>
<p>Ένα πρόγραμμα στην πιο βασική του μορφή παίρνει κάποια είσοδο, κάνει κάποια επεξεργασία και παράγει κάποια έξοδο. Το πρόγραμμα μετατροπής ανελκυστήρα αποτελεί ένα πολύ σύντομο, αλλά πλήρες πρόγραμμα, που δείχνει και τα τρία αυτά βήματα.</p>
<pre class="python"><code>usf = input(&#39;Enter the US Floor Number: &#39;)
wf = int(usf) - 1
print(&#39;Non-US Floor Number is&#39;,wf)

# Code: http://www.py4e.com/code3/elev.py</code></pre>
<p>Αν σκεφτούμε λίγο περισσότερο αυτό το πρόγραμμα, υπάρχει ο “έξω κόσμος” και το πρόγραμμα. Οι πτυχές εισόδου και εξόδου είναι εκεί όπου το πρόγραμμα αλληλεπιδρά με τον έξω κόσμο. Μέσα στο πρόγραμμα έχουμε κώδικα και δεδομένα για να ολοκληρώσουμε την εργασία, που έχει σχεδιαστεί για να λύσει το πρόγραμμα.</p>
<figure>
<img src="../images/program.svg" alt="Ένα Πρόγραμμα" style="height: 1.20in;"/>
<figcaption>
Ένα Πρόγραμμα
</figcaption>
</figure>
<p>Ένας τρόπος να αντιληφθούμε τον αντικειμενοστραφή προγραμματισμό είναι ότι διαχωρίζει το πρόγραμμά μας σε πολλαπλές “ζώνες”. Κάθε ζώνη περιέχει κάποιο κώδικα και δεδομένα (όπως ένα πρόγραμμα) και έχει καλά καθορισμένες αλληλεπιδράσεις με τον έξω κόσμο και τις άλλες ζώνες εντός του προγράμματος.</p>
<p>Αν ξανά κοιτάξουμε την εφαρμογή εξαγωγής συνδέσμων στην οποία χρησιμοποιήσαμε τη βιβλιοθήκη BeautifulSoup, μπορούμε να δούμε ένα πρόγραμμα που κατασκευάζεται συνδέοντας διαφορετικά αντικείμενα μεταξύ τους για να ολοκληρώσει μια εργασία:</p>
<p>  </p>
<pre class="python"><code># Για να το εκτελέσετε, κάντε λήψη του αρχείου zip BeautifulSoup
# από  http://www.py4e.com/code3/bs4.zip
# και αποσυμπιέστε το στον ίδιο κατάλογο με αυτό το αρχείο

import urllib.request, urllib.parse, urllib.error
from bs4 import BeautifulSoup
import ssl

# Αγνόηση των σφαλμάτων πιστοποιητικού SSL
ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE

url = input(&#39;Εισάγετε - &#39;)
html = urllib.request.urlopen(url, context=ctx).read()
soup = BeautifulSoup(html, &#39;html.parser&#39;)

# Ανάκτηση όλων των ετικετών αγκύρωσης
tags = soup(&#39;a&#39;)
for tag in tags:
    print(tag.get(&#39;href&#39;, None))

# Code: http://www.py4e.com/code3/urllinks.py</code></pre>
<p>Διαβάζουμε τη διεύθυνση URL σε μια συμβολοσειρά και στη συνέχεια τη περνάμε στο “urllib” για να ανακτήσουμε τα δεδομένα από τον ιστό. Η βιβλιοθήκη <code>urllib</code> χρησιμοποιεί τη βιβλιοθήκη <code>socket</code> για να πραγματοποιήσει την σύνδεση δικτύου, για την ανάκτηση των δεδομένων. Παίρνουμε τη συμβολοσειρά που επιστρέφει το <code>urllib</code> και τη δίνουμε στη BeautifulSoup για ανάλυση. Η BeautifulSoup χρησιμοποιεί το αντικείμενο <code>html.parser</code><a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a> και επιστρέφει ένα αντικείμενο. Καλούμε τη μέθοδο <code>tags()</code> στο επιστρεφόμενο αντικείμενο, που επιστρέφει ένα λεξικό αντικειμένων ετικετών. Με βρόχο διατρέχουμε τις ετικέτες και καλούμε τη μέθοδο <code>get()</code> για κάθε ετικέτα, για να εκτυπώσουμε το χαρακτηριστικό <code>href</code>.</p>
<p>Μπορούμε να σχεδιάσουμε μια εικόνα αυτού του προγράμματος και πώς συνεργάζονται τα αντικείμενα.</p>
<figure>
<img src="../images/program-oo.svg" alt="Ένα πρόγραμμα ως Δίκτυο Αντικειμένων" style="height: 1.50in;"/>
<figcaption>
Ένα πρόγραμμα ως Δίκτυο Αντικειμένων
</figcaption>
</figure>
<p>Το κλειδί εδώ δεν είναι να κατανοήσουμε τέλεια πώς λειτουργεί αυτό το πρόγραμμα, αλλά και να δούμε πώς χτίζουμε ένα δίκτυο αλληλεπιδρώντων αντικειμένων και ενορχηστρώνουμε την κίνηση των πληροφοριών μεταξύ των αντικειμένων για να δημιουργήσουμε ένα πρόγραμμα. Είναι επίσης σημαντικό να σημειωθεί ότι όταν κοιτάξατε αυτό το πρόγραμμα αρκετά κεφάλαια πίσω, μπορούσατε να καταλάβετε πλήρως τι συνέβαινε στο πρόγραμμα χωρίς καν να συνειδητοποιήσετε ότι το πρόγραμμα “ενορχηστρώνει την κίνηση των δεδομένων μεταξύ αντικειμένων”. Ήταν απλώς γραμμές κώδικα που έκαναν τη δουλειά τους.</p>
<h2 id="υποδιαιρώντας-ένα-πρόβλημα">Υποδιαιρώντας ένα πρόβλημα</h2>
<p>Ένα από τα πλεονεκτήματα της αντικειμενοστρεφούς προσέγγισης είναι ότι μπορεί να κρύψει την πολυπλοκότητα. Για παράδειγμα, ενώ πρέπει να γνωρίζουμε πώς να χρησιμοποιήσουμε τον κώδικα <code>urllib</code> και BeautifulSoup, δεν χρειάζεται να γνωρίζουμε πώς λειτουργούν αυτές οι βιβλιοθήκες εσωτερικά. Αυτό μας επιτρέπει να εστιάσουμε στο μέρος του προβλήματος που πρέπει να λύσουμε και να αγνοήσουμε τα άλλα μέρη του προγράμματος.</p>
<figure>
<img src="../images/program-oo-code.svg" alt="Παράβλεψη Λεπτομερειών Κατά τη Χρήση Αντικειμένου" style="height: 1.50in;"/>
<figcaption>
Παράβλεψη Λεπτομερειών Κατά τη Χρήση Αντικειμένου
</figcaption>
</figure>
<p>Αυτή η ικανότητα να εστιάζουμε αποκλειστικά στο μέρος ενός προγράμματος που μας ενδιαφέρει και να αγνοούμε τα υπόλοιπα είναι επίσης χρήσιμη στους προγραμματιστές των αντικειμένων που χρησιμοποιούμε. Για παράδειγμα, οι προγραμματιστές που ανέπτυξαν το BeautifulSoup δεν χρειαζόταν να γνωρίζουν ή να ενδιαφερθούν για το πώς ανακτούμε τη σελίδα HTML, ποια μέρη θέλουμε να διαβάσουμε ή τι σκοπεύουμε να κάνουμε με τα δεδομένα που εξάγουμε από την ιστοσελίδα.</p>
<figure>
<img src="../images/program-oo-bs4.svg" alt="Αγνοώντας τις Λεπτομέρειες Κατά την Κατασκευή ενός Αντικειμένου" style="height: 1.50in;"/>
<figcaption>
Αγνοώντας τις Λεπτομέρειες Κατά την Κατασκευή ενός Αντικειμένου
</figcaption>
</figure>
<h2 id="το-πρώτο-μας-αντικείμενο-python">Το πρώτο μας αντικείμενο Python</h2>
<p>Σε ένα στοιχειώδες επίπεδο, ένα αντικείμενο είναι απλώς κάποιος κώδικας συν κάποιες δομές δεδομένων, που είναι μικρότερες από ένα ολοκληρωμένο πρόγραμμα. Ο ορισμός μιας συνάρτησης μας επιτρέπει να αποθηκεύσουμε ένα κομμάτι κώδικα, να του δώσουμε ένα όνομα και στη συνέχεια να καλέσουμε αυτόν τον κωδικό, χρησιμοποιώντας το όνομα της συνάρτησης.</p>
<p>Ένα αντικείμενο μπορεί να περιέχει έναν αριθμό συναρτήσεων (τις οποίες ονομάζουμε <em>μεθόδους</em>) καθώς και δεδομένα, που χρησιμοποιούνται από αυτές τις συναρτήσεις. Καλούμε <em>χαρακτηριστικά</em> τα στοιχεία δεδομένων, που αποτελούν μέρος του αντικειμένου.</p>
<p></p>
<p>Χρησιμοποιούμε τη δεσμευμένη λέξη <code>class</code> για να ορίσουμε τα δεδομένα και τον κώδικα που θα αποτελέσουν κάθε ένα από τα αντικείμενα. Η δεσμευμένη λέξη class ακολουθήτε από το όνομα της κλάσης και οριοθετεί ένα μπλοκ κώδικα, με εσοχή, όπου συμπεριλαμβάνουμε τα χαρακτηριστικά (δεδομένα) και τις μεθόδους (κώδικας).</p>
<pre class="python"><code>class PartyAnimal:
   x = 0

   def party(self) :
     self.x = self.x + 1
     print(&quot;So far&quot;,self.x)

an = PartyAnimal()
an.party()
an.party()
an.party()
PartyAnimal.party(an)

# Code: http://www.py4e.com/code3/party2.py</code></pre>
<p>Στο παραπάνω παράδειγμα, κάθε μέθοδος μοιάζει με μια συνάρτηση, που ξεκινά με τη δεσμευμένη λέξη <code>def</code> και αποτελείται από ένα μπλοκ κώδικα με εσοχή. Αυτό το αντικείμενο έχει ένα χαρακτηριστικό (<code>x</code>) και μία μέθοδο (<code>party</code>). Οι μέθοδοι έχουν μια ειδική πρώτη παράμετρο που ονομάζουμε κατά σύμβαση <code>self</code>.</p>
<p>Ακριβώς όπως η δεσμευμένη λέξη <code>def</code> δεν προκαλεί την εκτέλεση του κώδικα συνάρτησης, έτσι και η δεσμευμένη λέξη <code>class</code> δεν δημιουργεί κάποιο αντικείμενο. Αντίθετα, η δεσμευμένη λέξη <code>class</code> ορίζει ένα πρότυπο, που υποδεικνύει ποια δεδομένα και κώδικας θα περιέχονται σε κάθε αντικείμενο τύπου <code>PartyAnimal</code>. Η κλάση είναι σαν κόφτης (κουπάτ) μπισκότων και τα αντικείμενα που δημιουργούνται χρησιμοποιώντας την κλάση είναι τα μπισκότα<a href="#fn2" class="footnote-ref" id="fnref2"><sup>2</sup></a>. Δεν βάζετε γλάσο στον κόφτη μπισκότων, βάζετε γλάσο στα μπισκότα και μπορείτε να βάλετε διαφορετικό γλάσο σε κάθε μπισκότο.</p>
<figure>
<img src="../photos/cookie_cutter_flickr_Didriks.png" alt="Μια Κλάση και Δύο Αντικείμενα" style="height: 2.0in;"/>
<figcaption>
Μια Κλάση και Δύο Αντικείμενα
</figcaption>
</figure>
<p>Εάν διατρέξουμε αυτό το δείγμα προγράμματος, εντοπίζουμε την πρώτη εκτελέσιμη γραμμή κώδικα:</p>
<pre class="python"><code>an = PartyAnimal()</code></pre>
<p>      </p>
<p>Εδώ δίνουμε εντολή στην Python να κατασκευάσει (δηλαδή, να δημιουργήσει) ένα <em>αντικείμενο</em> ή <em>στιγμιότυπο</em> της κλάσης <code>PartyAnimal</code>. Μοιάζει με μια κλήση συνάρτησης, προς την ίδια την κλάση. Η Python κατασκευάζει το αντικείμενο με τα σωστά δεδομένα και μεθόδους και επιστρέφει το αντικείμενο το οποίο στη συνέχεια εκχωρείται στη μεταβλητή <code>an</code>. Κατά κάποιο τρόπο αυτό μοιάζει αρκετά με την ακόλουθη γραμμή που χρησιμοποιούσαμε όλο το προηγούμενο διάστημα:</p>
<pre class="python"><code>πλήθη = dict()</code></pre>
<p>Εδώ δίνουμε εντολή στην Python να κατασκευάσει ένα αντικείμενο, χρησιμοποιώντας το πρότυπο <code>dict</code> (που υπάρχει ήδη στην Python), να επιστρέψει το στιγμιότυπο του λεξικού και να το αναθέσει στη μεταβλητή <code>πλήθη</code>.</p>
<p>Όταν η κλάση <code>PartyAnimal</code> χρησιμοποιήθηκε για την κατασκευή ενός αντικειμένου, η μεταβλητή <code>an</code> χρησιμοποιήθηκε για να δείξει σε αυτό το αντικείμενο. Χρησιμοποιούμε το <code>an</code> για πρόσβαση στον κώδικα και τα δεδομένα του συγκεκριμένου στιγμιότυπου της κλάσης <code>PartyAnimal</code>.</p>
<p>Κάθε αντικείμενο/στιγμιότυπο Partyanimal περιέχει μέσα του μια μεταβλητή <code>x</code> και μια μέθοδο/συνάρτηση με το όνομα <code>party</code>. Καλούμε τη μέθοδο <code>party</code> σε αυτή τη γραμμή:</p>
<pre class="python"><code>an.party()</code></pre>
<p>Όταν καλείται η μέθοδος <code>party</code>, η πρώτη παράμετρος (την οποία ονομάζουμε κατά σύμβαση <code>self</code>) δείχνει τη συγκεκριμένη περίπτωση του αντικειμένου PartyAnimal για την οποία καλείται το <code>party</code>. Στη μέθοδο <code>party</code>, βλέπουμε τη γραμμή:</p>
<pre class="python"><code>self.x = self.x + 1</code></pre>
<p>Αυτή η σύνταξη, που χρησιμοποιεί τον τελεστή <em>dot</em> λέει ‘το x μέσα στο self’. Κάθε φορά που καλείται η <code>party()</code>, η εσωτερική τιμή του <code>x</code> αυξάνεται κατά 1 και η τιμή εκτυπώνεται.</p>
<p>Η ακόλουθη γραμμή είναι ένας άλλος τρόπος για να καλέσετε τη μέθοδο <code>party</code> στο αντικείμενο <code>an</code>:</p>
<pre class="python"><code>PartyAnimal.party(an)</code></pre>
<p>Σε αυτήν την παραλλαγή, έχουμε πρόσβαση στον κώδικα μέσα από την κλάση και μεταβιβάζουμε ρητά τον δείκτη αντικειμένου <code>an</code> ως πρώτη παράμετρο (δηλαδή, <code>self</code> στη μέθοδο). Μπορείτε να σκεφτείτε το <code>an.party()</code> ως συντομογραφία για την παραπάνω γραμμή.</p>
<p>Όταν το πρόγραμμα εκτελείται, παράγει την ακόλουθη έξοδο:</p>
<pre class="{text}"><code>So far 1
So far 2
So far 3
So far 4</code></pre>
<p>Το αντικείμενο κατασκευάζεται και η μέθοδος <code>party</code> καλείται τέσσερις φορές, αυξάνοντας και εκτυπώνοντας την τιμή του <code>x</code> μέσα στο αντικείμενο <code>an</code>.</p>
<h2 id="οι-κλάσεις-ως-τύποι">Οι κλάσεις ως τύποι</h2>
<p> </p>
<p>Όπως είδαμε, στην Python όλες οι μεταβλητές έχουν έναν τύπο. Μπορούμε να χρησιμοποιήσουμε την ενσωματωμένη συνάρτηση <code>dir</code> για να εξετάσουμε τις δυνατότητες μιας μεταβλητής. Μπορούμε επίσης να χρησιμοποιήσουμε τις <code>type</code> και <code>dir</code> με τις κλάσεις που δημιουργούμε.</p>
<pre class="python"><code>class PartyAnimal:
   x = 0

   def party(self) :
     self.x = self.x + 1
     print(&quot;So far&quot;,self.x)

an = PartyAnimal()
print (&quot;Type&quot;, type(an))
print (&quot;Dir &quot;, dir(an))
print (&quot;Type&quot;, type(an.x))
print (&quot;Type&quot;, type(an.party))

# Code: http://www.py4e.com/code3/party3.py</code></pre>
<p>Όταν εκτελείται αυτό το πρόγραμμα, παράγει την ακόλουθη έξοδο:</p>
<pre class="{text}"><code>Type &lt;class &#39;__main__.PartyAnimal&#39;&gt;
Dir  [&#39;__class__&#39;, &#39;__delattr__&#39;, ...
&#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;,
&#39;__weakref__&#39;, &#39;party&#39;, &#39;x&#39;]
Type &lt;class &#39;int&#39;&gt;
Type &lt;class &#39;method&#39;&gt;</code></pre>
<p>Μπορείτε να δείτε ότι χρησιμοποιώντας τη δεσμευμένη λέξη <code>class</code>, δημιουργήσαμε έναν νέο τύπο. Από την έξοδο της <code>dir</code>, μπορείτε να δείτε ότι και το χαρακτηριστικό ακεραίου <code>x</code> και η μέθοδος <code>party</code> είναι διαθέσιμα στο αντικείμενο.</p>
<h2 id="κύκλος-ζωής-αντικειμένου">Κύκλος ζωής αντικειμένου</h2>
<p>    </p>
<p>Στα προηγούμενα παραδείγματα, ορίζουμε μια κλάση (πρότυπο), χρησιμοποιούμε αυτήν την κλάση για να δημιουργήσουμε ένα στιγμιότυπο αυτής της κλάσης (αντικείμενο) και, στη συνέχεια, χρησιμοποιούμε το στιγμιότυπο. Όταν τελειώσει το πρόγραμμα, όλες οι μεταβλητές καταστρέφονται. Συνήθως, δεν σκεφτόμαστε πολύ τη δημιουργία και την καταστροφή μεταβλητών, αλλά συχνά, καθώς τα αντικείμενά μας γίνονται πιο περίπλοκα, πρέπει να ορίσουμε κάποια ενέργεια μέσα στο αντικείμενο, για να ρυθμίσουμε την κατασκευή του αντικειμένου και πιθανώς να καθαρίσουμε τα πράγματα όταν το αντικείμενο καταστρέφεται.</p>
<p>Εάν θέλουμε το αντικείμενό μας “προετοιμασμένο” για αυτές τις στιγμές κατασκευής και καταστροφής, προσθέτουμε στο αντικείμενο μας ειδικές μεθόδους:</p>
<pre class="python"><code>class PartyAnimal:
   x = 0

   def __init__(self):
     print(&#39;I am constructed&#39;)

   def party(self) :
     self.x = self.x + 1
     print(&#39;So far&#39;,self.x)

   def __del__(self):
     print(&#39;I am destructed&#39;, self.x)

an = PartyAnimal()
an.party()
an.party()
an = 42
print(&#39;an contains&#39;,an)

# Code: http://www.py4e.com/code3/party4.py</code></pre>
<p>Όταν εκτελείται αυτό το πρόγραμμα, παράγει την ακόλουθη έξοδο:</p>
<pre class="{text}"><code>I am constructed
So far 1
So far 2
I am destructed 2
an contains 42</code></pre>
<p>Καθώς η Python κατασκευάζει το αντικείμενό μας, καλεί τη μέθοδο <code>__init__</code> για να μας δώσει την ευκαιρία να ορίσουμε κάποιες προεπιλεγμένες ή αρχικές τιμές για το αντικείμενο. Όταν η Python συναντά τη γραμμή:</p>
<pre class="{text}"><code>an = 42</code></pre>
<p>Στην πραγματικότητα “πετάει το αντικείμενό μας”, ώστε να μπορέσει να χρησιμοποιήσει ξανά τη μεταβλητή <code>an</code> για να αποθηκεύσει την τιμή <code>42</code>. Ακριβώς τη στιγμή που το αντικείμενό μας <code>an</code> “καταστρέφεται” καλείται ο κωδικός του καταστροφέα μας (<code>__del__</code>). Δεν μπορούμε να σταματήσουμε την καταστροφή της μεταβλητής μας, αλλά μπορούμε να κάνουμε οποιονδήποτε απαραίτητο καθαρισμό πριν το αντικείμενό μας πάψει να υπάρχει πλέον.</p>
<p>Κατά την ανάπτυξη αντικειμένων, είναι αρκετά συνηθισμένο να προσθέτουμε έναν κατασκευαστή σε ένα αντικείμενο, για να ορίσουμε αρχικές τιμές για το αντικείμενο. Είναι σχετικά σπάνιο να χρειαστείτε καταστροφέα για ένα αντικείμενο.</p>
<h2 id="πολλαπλά-στιγμιότυπα">Πολλαπλά στιγμιότυπα</h2>
<p>Μέχρι στιγμής, ορίσαμε μια κλάση, κατασκευάσαμε ένα μεμονωμένο αντικείμενο, χρησιμοποιήσαμε αυτό το αντικείμενο και μετά το πετάξαμε. Ωστόσο, η πραγματική δύναμη του αντικειμενοστραφούς προγραμματισμού εκδηλώνεται όταν κατασκευάζουμε πολλαπλά στιγμιότυπο της κλάσης μας.</p>
<p>Όταν κατασκευάζουμε πολλά αντικείμενα από την κλάση μας, ίσως θελήσουμε να ορίσουμε διαφορετικές αρχικές τιμές, σε καθένα από τα αντικείμενα. Μπορούμε να περάσουμε δεδομένα στους κατασκευαστές για να δώσουμε σε κάθε αντικείμενο διαφορετική αρχική τιμή:</p>
<pre class="python"><code>class PartyAnimal:
   x = 0
   name = &#39;&#39;
   def __init__(self, nam):
     self.name = nam
     print(self.name,&#39;constructed&#39;)

   def party(self) :
     self.x = self.x + 1
     print(self.name,&#39;party count&#39;,self.x)

s = PartyAnimal(&#39;Sally&#39;)
j = PartyAnimal(&#39;Jim&#39;)

s.party()
j.party()
s.party()

# Code: http://www.py4e.com/code3/party5.py</code></pre>
<p>Ο κατασκευαστής έχει και μια παράμετρο <code>self</code>, που δείχνει στο στιγμιότυπο του αντικειμένου, και πρόσθετες παραμέτρους, που μεταβιβάζονται στον κατασκευαστή καθώς κατασκευάζεται το αντικείμενο:</p>
<pre class="{text}"><code>s = PartyAnimal(&#39;Sally&#39;)</code></pre>
<p>Εντός του κατασκευαστή, η δεύτερη γραμμή αντιγράφει την παράμετρο (<code>nam</code>), που μεταβιβάζεται στο χαρακτηριστικό <code>name</code> στο στιγμιότυπο του αντικειμένου.</p>
<pre class="{text}"><code>self.name = nam</code></pre>
<p>Η έξοδος του προγράμματος δείχνει ότι καθένα από τα αντικείμενα (<code>s</code> και <code>j</code>) περιέχει τα δικά του ανεξάρτητα αντίγραφα των <code>x</code> και <code>nam</code>:</p>
<pre class="{text}"><code>Sally constructed
Jim constructed
Sally party count 1
Jim party count 1
Sally party count 2</code></pre>
<h2 id="κληρονομικότητα">Κληρονομικότητα</h2>
<p>Ένα άλλο ισχυρό χαρακτηριστικό του αντικειμενοστρεφούς προγραμματισμού είναι η δυνατότητα δημιουργίας μιας νέας κλάσης επεκτείνοντας μια υπάρχουσα κλάση. Όταν επεκτείνουμε μια κλάση, ονομάζουμε την αρχική κλάση <em>κλάση γονέας</em> και τη νέα κλάση <em>κλάση παιδί</em>.</p>
<p>Για αυτό το παράδειγμα, μετακινούμε την κλάση <code>PartyAnimal</code> στο δικό της αρχείο. Στη συνέχεια, μπορούμε να ‘εισάγουμε - import’ την κλάση <code>PartyAnimal</code> σε ένα νέο αρχείο και να την επεκτείνουμε, ως εξής:</p>
<pre class="python"><code>from party import PartyAnimal

class CricketFan(PartyAnimal):
   points = 0
   def six(self):
      self.points = self.points + 6
      self.party()
      print(self.name,&quot;points&quot;,self.points)

s = PartyAnimal(&quot;Sally&quot;)
s.party()
j = CricketFan(&quot;Jim&quot;)
j.party()
j.six()
print(dir(j))

# Code: http://www.py4e.com/code3/party6.py</code></pre>
<p>Όταν ορίζουμε την κλάση <code>CricketFan</code>, υποδεικνύουμε ότι επεκτείνουμε την κλάση <code>PartyAnimal</code>. Αυτό σημαίνει ότι όλες οι μεταβλητές (<code>x</code>) και οι μέθοδοι (<code>party</code>) της κλάσης <code>PartyAnimal</code> <em>κληρονομούνται</em> από την κλάση <code>CricketFan</code>. Για παράδειγμα, στη μέθοδο <code>six</code>, της κλάσης <code>CricketFan</code>, καλούμε τη μέθοδο <code>party</code>, από την κλάση <code>PartyAnimal</code>.</p>
<p>Καθώς εκτελείται το πρόγραμμα, δημιουργούμε τα <code>s</code> και <code>j</code>, ως ανεξάρτητα στιγμιότυπα των <code>PartyAnimal</code> και <code>CricketFan</code>. Το αντικείμενο <code>j</code> έχει πρόσθετες δυνατότητες πέρα από αυτές του αντικειμένου <code>s</code>.</p>
<pre class="{text}"><code>Sally constructed
Sally party count 1
Jim constructed
Jim party count 1
Jim party count 2
Jim points 6
[&#39;__class__&#39;, &#39;__delattr__&#39;, ... &#39;__weakref__&#39;,
&#39;name&#39;, &#39;party&#39;, &#39;points&#39;, &#39;six&#39;, &#39;x&#39;]</code></pre>
<p>Στην έξοδο <code>dir</code>, για το αντικείμενο <code>j</code> (στιγμιότυπο της κλάσης <code>CricketFan</code>), βλέπουμε ότι έχει τα χαρακτηριστικά και τις μεθόδους της γονικής κλάσης, καθώς και τα χαρακτηριστικά και τις μεθόδους που προστέθηκαν όταν η κλάση επεκτάθηκε, για να δημιουργηθεί η κλάση <code>CricketFan</code>.</p>
<h2 id="περίληψη">Περίληψη</h2>
<p>Αυτή είναι μια πολύ γρήγορη εισαγωγή στον αντικειμενοστραφή προγραμματισμό, που εστιάζει κυρίως στην ορολογία, τον ορισμό και τη χρήσης αντικειμένων. Ας δούμε, γρήγορα, τον κώδικα που είδαμε στην αρχή του κεφαλαίου. Σε αυτό το σημείο θα πρέπει να καταλάβετε πλήρως τι συμβαίνει.</p>
<pre class="python"><code>stuff = list()
stuff.append(&#39;python&#39;)
stuff.append(&#39;chuck&#39;)
stuff.sort()
print (stuff[0])
print (stuff.__getitem__(0))
print (list.__getitem__(stuff,0))

# Code: http://www.py4e.com/code3/party1.py</code></pre>
<p>Η πρώτη γραμμή δημιουργεί ένα <em>αντικείμενο</em> <code>list (λίστα)</code>. Όταν η Python δημιουργεί το αντικείμενο <code>list</code>, καλεί τη μέθοδο <em>κατασκευαστή</em> (με το όνομα <code>__init__</code>), για να ρυθμίσει τα εσωτερικά χαρακτηριστικά δεδομένων, που θα χρησιμοποιηθούν για την αποθήκευση των δεδομένων της λίστας. Δεν έχουμε περάσει καμία παράμετρο στον <em>κατασκευαστή</em>. Όταν ο κατασκευαστής επιστρέφει, χρησιμοποιούμε τη μεταβλητή <code>stuff</code>, για να δείξουμε το επιστρεφόμενο στιγμιότυπο της κλάσης <code>list</code>.</p>
<p>Η δεύτερη και η τρίτη γραμμή καλούν τη μέθοδο <code>append</code> με μία παράμετρο, για να προσθέσουν ένα νέο στοιχείο στο τέλος της λίστας, ενημερώνοντας τα χαρακτηριστικά μέσα στο <code>stuff</code>. Στη συνέχεια, στην τέταρτη γραμμή, καλούμε τη μέθοδο <code>sort</code> χωρίς παραμέτρους, για να ταξινομήσουμε τα δεδομένα μέσα στο αντικείμενο <code>stuff</code>.</p>
<p>Στη συνέχεια, εκτυπώνουμε το πρώτο στοιχείο στη λίστα, χρησιμοποιώντας τις αγκύλες, που αποτελούν συντόμευση για την κλήση της μεθόδου <code>__getitem__</code> μέσα στο <code>stuff</code>. Αυτό ισοδυναμεί με την κλήση της μεθόδου <code>__getitem__</code> στη <em>κλάση</em> <code>list</code> και τη διαβίβαση του αντικειμένου <code>stuff</code> ως πρώτη παράμετρο και τη θέση που αναζητούμε ως δεύτερη παράμετρο.</p>
<p>Στο τέλος του προγράμματος, το αντικείμενο <code>stuff</code> απορρίπτεται, αλλά όχι πριν καλέσετε τον <em>καταστροφέα</em> (με το όνομα <code>__del__</code>), έτσι ώστε το αντικείμενο να μπορεί να τακτοποιήσει τυχόν εκκρεμή ζητήματα όπως απαιτείται.</p>
<p>Αυτά είναι τα βασικά του αντικειμενοστρεφούς προγραμματισμού. Υπάρχουν πολλές πρόσθετες λεπτομέρειες σχετικά με τον καλύτερο τρόπο χρήσης αντικειμενοστρεφών προσεγγίσεων κατά την ανάπτυξη μεγάλων εφαρμογών και βιβλιοθηκών, που δεν εμπίπτουν στο πεδίο αυτού του κεφαλαίου.<a href="#fn3" class="footnote-ref" id="fnref3"><sup>3</sup></a></p>
<h2 id="γλωσσάριο">Γλωσσάριο</h2>
<dl>
<dt>attribute - χαρακτηριστικό ή ιδιότητα</dt>
<dd>Μια μεταβλητή που είναι μέρος μιας κλάσης.
</dd>
<dt>αντικείμενο</dt>
<dd>Ένα κατασκευασμένο στιγμιότυπο μιας κλάσης. Ένα αντικείμενο περιέχει όλα τα χαρακτηριστικά και τις μεθόδους, που ορίστηκαν από την κλάση. Κάποια αντικειμενοστραφή τεκμηρίωση χρησιμοποιεί τον όρο ‘στιγμιότυπο’ εναλλακτικά του ‘αντικείμενο’.
</dd>
<dt>κατασκευστής</dt>
<dd>Μια προαιρετική μέθοδος με ειδική ονομασία (<code>__init__</code>), που καλείται τη στιγμή που μια κλάση χρησιμοποιείται για την κατασκευή ενός αντικειμένου. Συνήθως χρησιμοποιείται για τη ρύθμιση αρχικών τιμών του αντικειμένου.
</dd>
<dt>καταστροφέας</dt>
<dd>Μια προαιρετική μέθοδος με ειδική ονομασία (<code>__del__</code>), που καλείται τη στιγμή ακριβώς πριν από την καταστροφή ενός αντικειμένου. Οι καταστροφείς χρησιμοποιούνται σπάνια.
</dd>
<dt>κλάση</dt>
<dd>Ένα πρότυπο, που μπορεί να χρησιμοποιηθεί για την κατασκευή ενός αντικειμένου. Καθορίζει τα χαρακτηριστικά και τις μεθόδους που θα αποτελέσουν το αντικείμενο.
</dd>
<dt>κλάση γονέας</dt>
<dd>Η κλάση που επεκτείνεται για τη δημιουργία μιας νέας θυγατρικής κλάσης. Η γονεϊκή κλάση συνεισφέρει όλες τις μεθόδους και τα χαρακτηριστικά της στη νέα θυγατρική κλάση.
</dd>
<dt>κλάση παιδί</dt>
<dd>Μια νέα κλάση που δημιουργείται όταν επεκτείνεται μια γονεϊκή κλάση. Η κλάση παιδί κληρονομεί όλα τα χαρακτηριστικά και τις μεθόδους της γονεϊκής κλάσης.
</dd>
<dt>κληρονομικότητα</dt>
<dd>Όταν δημιουργούμε μια νέα κλάση (παιδί) επεκτείνοντας μια υπάρχουσα κλάση (γονέας). Η θυγατρική κλάση έχει όλα τα χαρακτηριστικά και τις μεθόδους της γονεϊκής κλάσης συν επιπλέον χαρακτηριστικά και μεθόδους που ορίζονται από τη θυγατρική κλάση.
</dd>
<dt>μέθοδος</dt>
<dd>Μια συνάρτηση που περιέχεται σε μια κλάση και στα αντικείμενα που κατασκευάζονται από αυτή την κλάση. Ορισμένα αντικειμενοστραφή μοτίβα χρησιμοποιούν τον όρο ‘μήνυμα’ αντί για ‘μέθοδο’ για να περιγράψουν αυτήν την έννοια.
</dd>
</dl>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>https://docs.python.org/3/library/html.parser.html<a href="#fnref1" class="footnote-back">↩</a></p></li>
<li id="fn2"><p>Cookie image copyright CC-BY https://www.flickr.com/photos/dinnerseries/23570475099<a href="#fnref2" class="footnote-back">↩</a></p></li>
<li id="fn3"><p>Εάν είστε περίεργοι για το πού ορίζεται η κλάση <code>list</code>, ρίξτε μια ματιά στο (ελπίζουμε ότι η διεύθυνση URL δεν θα αλλάξει) https://github.com/python/cpython/blob/master/Objects/listobject.c - η κλάση λίστας είναι γραμμένη σε μια γλώσσα που ονομάζεται “C”. Αν ρίξετε μια ματιά σε αυτόν τον πηγαίο κώδικα και τον βρείτε περίεργο, ίσως θέλετε να εξερευνήσετε μερικά μαθήματα Επιστήμης Υπολογιστών.<a href="#fnref3" class="footnote-back">↩</a></p></li>
</ol>
</section>
</body>
</html>
<?php if ( file_exists("../bookfoot.php") ) {
  $HTML_FILE = basename(__FILE__);
  $HTML = ob_get_contents();
  ob_end_clean();
  require_once "../bookfoot.php";
}?>
