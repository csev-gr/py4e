<?php if ( file_exists("../booktop.php") ) {
  require_once "../booktop.php";
  ob_start();
}?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>-</title>
  <style>
    html {
      line-height: 1.5;
      font-family: Georgia, serif;
      font-size: 20px;
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 1em;
      }
    }
    @media print {
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li > ol, li > ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, 'Lucida Console', Consolas, monospace;
      font-size: 85%;
      margin: 0;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    span.underline{text-decoration: underline;}
    div.column{display: inline-block; vertical-align: top; width: 50%;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  </style>
  <!--[if lt IE 9]>
    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js"></script>
  <![endif]-->
</head>
<body>
<h1 id="δομή-επανάληψης">Δομή Επανάληψης</h1>
<p> </p>
<h2 id="ενημέρωση-μεταβλητών">Ενημέρωση μεταβλητών</h2>
<p> </p>
<p>Ένα συνηθισμένο μοτίβο στις εντολές εκχώρησης είναι μια εντολή εκχώρησης που ενημερώνει μια μεταβλητή και η νέα τιμή της μεταβλητής εξαρτάται από την παλιά.</p>
<pre class="python"><code>x = x + 1</code></pre>
<p>Αυτό σημαίνει “πάρε την τρέχουσα τιμή του <code>x</code>, πρόσθεσε 1 και μετά ενημερώστε το <code>x</code> με τη νέα τιμή.”</p>
<p>Εάν προσπαθήσετε να ενημερώσετε μια μεταβλητή που δεν υπάρχει, λαμβάνετε ένα σφάλμα, επειδή η Python αξιολογεί το δεξί μέλος πριν εκχωρήσει μια τιμή στο <code>x</code>:</p>
<pre class="python"><code>&gt;&gt;&gt; x = x + 1
NameError: name &#39;x&#39; is not defined</code></pre>
<p>Πριν μπορέσετε να ενημερώσετε μια μεταβλητή, θα πρέπει να την <em>αρχικοποιήσετε</em>, συνήθως με μια απλή εκχώρηση:</p>
<p></p>
<pre class="python"><code>&gt;&gt;&gt; x = 0
&gt;&gt;&gt; x = x + 1</code></pre>
<p>Η ενημέρωση μιας μεταβλητής προσθέτοντας 1 ονομάζεται <em>αύξηση (increment)</em>, ενώ η αφαίρεση του 1 ονομάζεται <em>μείωση (decrement)</em>.</p>
<p>   </p>
<h2 id="η-εντολή-while">Η εντολή <code>while</code></h2>
<p>   </p>
<p>Οι υπολογιστές χρησιμοποιούνται συχνά για την αυτοματοποίηση επαναλαμβανόμενων εργασιών. Η επανάληψη ίδιων ή παρόμοιων εργασιών χωρίς σφάλματα είναι κάτι που οι υπολογιστές κάνουν καλά και οι άνθρωποι όχι και τόσο καλά. Επειδή η επανάληψη είναι τόσο συνηθισμένη, η Python παρέχει πολλές γλωσσικές δυνατότητες για να το διευκολύνει.</p>
<p>Μια εντολή επανάληψης στην Python είναι η εντολή <code>while</code>. Εδώ έχουμε ένα απλό πρόγραμμα που μετρά αντίστροφα από το πέντε και μετά λέει “Blastoff!”.</p>
<pre class="python"><code>n = 5
while n &gt; 0:
    print(n)
    n = n - 1
print(&#39;Blastoff!&#39;)</code></pre>
<p>Μπορείτε σχεδόν να διαβάσετε τη δήλωση <code>while</code> σαν να ήταν Αγγλικά. Σημαίνει, “Όσο το <code>n</code> είναι μεγαλύτερο από 0, εμφανίστε την τιμή του <code>n</code> και στη έπειτα μειώστε την τιμή του <code>n</code> κατά 1. Όταν φτάσει στο 0, βγες από την εντολή <code>while</code> και εμφανίστε τη λέξη <code>Blastoff</code> !”</p>
<p></p>
<p>Πιο επίσημα, αυτή είναι η ροή της εκτέλεσης για μια εντολή <code>while</code>:</p>
<ol type="1">
<li><p>Αξιολογήστε τη συνθήκη, δίνοντας <code>True (Αληθής)</code> ή <code>False (Ψευδής)</code>.</p></li>
<li><p>Εάν η συνθήκη είναι ψευδής, βγες από την ενολή <code>while</code> και συνέχισε την εκτέλεση με την επόμενη εντολή.</p></li>
<li><p>Εάν η συνθήκη είναι αληθής, εκτέλεσε τις εντολές μέσα στη <code>while</code> και στη συνέχεια πήγαινε πίσω στο βήμα 1.</p></li>
</ol>
<p>Αυτός ο τύπος ροής ονομάζεται <em>βρόχος (loop)</em> επειδή το τρίτο βήμα επαναφέρει την εκτέλεση και πάλι στην αρχή. Καλούμε, κάθε εκτέλεση του σώματος του βρόχου, <em>επανάληψη</em>. Για τον παραπάνω βρόχο, θα λέγαμε, “Πραγματοποιεί πέντε επαναλήψεις”, που σημαίνει ότι το σώμα του βρόχου εκτελέστηκε πέντε φορές.</p>
<p>  </p>
<p>Στο σώμα του βρόχου θα πρέπει να αλλάξει την τιμή μιας ή περισσότερων μεταβλητών έτσι ώστε τελικά η συνθήκη να γίνει ψευδής και ο βρόχος να τερματιστεί. Καλούμε τη μεταβλητή που αλλάζει κάθε φορά που εκτελείται ο βρόχος και ελέγχει πότε θα τερματίσει ο βρόχος <em>μεταβλητή επανάληψης</em>. Εάν δεν υπάρχει μεταβλητή επανάληψης, ο βρόχος θα επαναλαμβάνεται επ’ άπειρον, με αποτέλεσμα έναν <em>ατέρμων βρόχο</em>.</p>
<h2 id="ατέρμονες-βρόχοι">Ατέρμονες βρόχοι</h2>
<p>Μια ατελείωτη πηγή διασκέδασης για τους προγραμματιστές είναι η παρατήρηση ότι οι οδηγίες στα σαμπουάν, “Σαπουνίστε, ξεπλύνετε, επαναλάβετε”, είναι ένας ατέρμων βρόχος, επειδή δεν υπάρχει <em>μεταβλητή επανάληψης</em> που να σας λέει πόσες φορές να εκτελέσετε τον βρόχο.</p>
<p>index{ατέρμων βρόχος} </p>
<p>Στην περίπτωση της <code>αντίστροφης μέτρησης</code>, μπορούμε να αποδείξουμε ότι ο βρόχος τερματίζεται επειδή γνωρίζουμε ότι η τιμή του <code>n</code> είναι πεπερασμένη και μπορούμε να δούμε ότι η τιμή του <code>n</code> ελαττώνεται κάθε φορά που εκτελείται ο βρόχος, οπότε τελικά πρέπει να φτάσει στο 0. Άλλες φορές ένας βρόχος είναι προφανώς άπειρος επειδή δεν έχει καμία μεταβλητή επανάληψης.</p>
<p> </p>
<p>Μερικές φορές δεν γνωρίζεται ότι είναι ώρα να τερματίσετε έναν βρόχο παρά μόνο όταν έχετε φτάσει στα μισά του σώματος. Σε αυτήν την περίπτωση, μπορείτε να γράψετε εσκεμμένα έναν ατέρνων βρόχο και στη συνέχεια να χρησιμοποιήσετε την εντολή <code>break</code> για να βγείτε από τον βρόχο.</p>
<p>Αυτός ο βρόχος είναι προφανώς ένας <em>ατέρνων βρόχος</em> επειδή η λογική έκφραση στην <code>while</code> είναι απλώς η λογική σταθερά <code>True</code>:</p>
<pre class="python"><code>n = 10
while True:
    print(n, end=&#39; &#39;)
    n = n - 1
print(&#39;Τέλος!&#39;)</code></pre>
<p>Εάν κάνετε το λάθος και εκτελέσετε αυτόν τον κώδικα, θα μάθετε γρήγορα πώς να διακόψετε μια εκτρεπόμενη διαδικασία Python στο σύστημά σας ή θα βρείτε πού βρίσκεται το κουμπί απενεργοποίησης στον υπολογιστή σας. Αυτό το πρόγραμμα θα λειτουργεί επ’ άπειρον ή τουλάχιστον μέχρι να εξαντληθεί η μπαταρία σας επειδή η λογική έκφραση στην αρχή του βρόχου είναι πάντα αληθής, λόγω του ότι η έκφραση είναι η σταθερή τιμή <code>True</code>.</p>
<p>Αν και πρόκειται για έναν δυσλειτουργικό ατέρμων βρόχο, μπορούμε να χρησιμοποιήσουμε αυτό το μοτίβο για να δημιουργήσουμε χρήσιμους βρόχους, αρκεί να προσθέσουμε προσεκτικά κώδικα στο σώμα του βρόχου για να βγούμε ρητά από τον βρόχο χρησιμοποιώντας <code>break</code> όταν έχουμε φτάσει στην κατάσταση εξόδου.</p>
<p>Για παράδειγμα, ας υποθέσουμε ότι θέλετε να λαμβάνετε είσοδο από τον χρήστη μέχρι να πληκτρολογήσει <code>τέλος</code>. Θα μπορούσατε να γράψετε:</p>
<pre class="python"><code>while True:
    γραμμή = input(&#39;&gt; &#39;)
    if γραμμή == &#39;τέλος&#39;:
        break
    print(γραμμή)
print(&#39;Τέλος!&#39;)

# Code: http://www.gr.py4e.com/code3/copytildone1.py</code></pre>
<p>Η συνθήκη βρόχου είναι <code>True</code>, η οποία είναι πάντα αληθής, επομένως ο βρόχος εκτελείται επανειλημμένα μέχρι να συναντήσει στην εντολή break.</p>
<p>Κάθε φορά που εκτελείται, προτρέπει τον χρήστη με ένα σύμβολο μεγαλύτερου. Εάν ο χρήστης πληκτρολογήσει <code>τέλος</code>, η εντολή <code>break</code> διακόπτει την εκτέλεση του βρόχου. Διαφορετικά, το πρόγραμμα επαναλαμβάνει ό,τι πληκτρολογεί ο χρήστης και επιστρέφει στην αρχή του βρόχου. Εδώ είναι ένα δείγμα εκτέλεσης:</p>
<pre class="{text}"><code>&gt; hello there
hello there
&gt; finished
finished
&gt; τέλος
Τέλος!</code></pre>
<p>Αυτός ο τρόπος γραφής των βρόχων <code>while</code> είναι συνηθισμένος επειδή μπορείτε να ελέγξετε τη συνθήκη οπουδήποτε στον βρόχο (όχι μόνο στην αρχή) και μπορείτε να εκφράσετε τη συνθήκη διακοπής καταφατικά (“σταμάτα όταν συμβεί αυτό”) και όχι αρνητικά (“συνεχισε μέχρι να συμβεί αυτό.”).</p>
<h2 id="ολοκλήρωση-επαναλήψεων-με-continue">Ολοκλήρωση επαναλήψεων με <code>continue</code></h2>
<p> </p>
<p>Μερικές φορές βρίσκεστε σε μια επανάληψη ενός βρόχου και θέλετε να ολοκληρώσετε την τρέχουσα εκτέλεσή της και να μεταβείτε άμεσα στην επόμενη εκτέλεση. Σε αυτήν την περίπτωση, μπορείτε να χρησιμοποιήσετε την εντολή <code>continue</code> για να μεταβείτε στην επόμενη εκτέλεση χωρίς να ολοκληρώσετε το σώμα του βρόχου για την τρέχουσα εκτέλεση.</p>
<p>Ακολουθεί ένα παράδειγμα βρόχου που αντιγράφει την είσοδό του έως ότου ο χρήστης πληκτρολογήσει <code>τέλος</code>, αλλά αντιμετωπίζει τις γραμμές που ξεκινούν με τον χαρακτήρα # (Αριθμός - hash), ως γραμμές που δεν πρέπει να εκτυπωθούν (κάπως σαν σχόλια της Python).</p>
<pre class="python"><code>while True:
    γραμμή = input(&#39;&gt; &#39;)
    if γραμμή[0] == &#39;#&#39;:
        continue
    if γραμμή == &#39;τέλος&#39;:
        break
    print(γραμμή)
print(&#39;Τέλος!&#39;)

# Code: http://www.gr.py4e.com/code3/copytildone2.py</code></pre>
<p>Ακολουθεί ένα δείγμα εκτέλεσης αυτού του νέου προγράμματος με την προσθήκη του <code>continue</code>.</p>
<pre class="{text}"><code>&gt; hello there
hello there
&gt; # don&#39;t print this
&gt; print this!
print this!
&gt; τέλος
Τέλος!</code></pre>
<p>Όλες οι γραμμές εκτυπώνονται εκτός από αυτή που ξεκινά με το σύμβολο αριθμού, επειδή όταν εκτελεστεί η <code>continue</code>, τερματίζει την τρέχουσα εκτέλεση και μεταπηδά πίσω στην αρχή της εντολής <code>while</code> για να ξεκινήσει η επόμενη εκτέλεση, παρακάμπτοντας έτσι την εντολή <code>print</code>.</p>
<h2 id="ορισμός-βρόχων-με-χρήση-της-for">Ορισμός βρόχων με χρήση της <code>for</code></h2>
<p> </p>
<p>Μερικές φορές θέλουμε να κάνουμε να διατρέξουμε ένα <em>σύνολο</em> πραγμάτων, όπως μια λίστα λέξεων, τις γραμμές ενός αρχείου ή μια λίστα αριθμών. Όταν έχουμε να διατρέξουμε μια λίστα πραγμάτων, μπορούμε να κατασκευάσουμε έναν βρόχο <em>καθορισμένο</em> χρησιμοποιώντας μια εντολή <code>for</code>. Ονομάζουμε την <code>while</code> <em>αόριστο</em> βρόχο επειδή απλώς επαναλαμβάνεται μέχρις ότου κάποια συνθήκη γίνει <code>Ψευδής - False</code>, ενώ ο βρόχος <code>for</code> διατρέχει ένα γνωστό σύνολο στοιχείων, επομένως εκτελεί τόσες επαναλήψεις όσα και τα στοιχεία του συνόλου.</p>
<p>Η σύνταξη ενός βρόχου <code>for</code> είναι παρόμοια με του βρόχου <code>while</code>, καθώς και στε αυτόν υπάρχει μια δήλωση <code>for</code> και ένα σώμα βρόχου:</p>
<pre class="python"><code>φίλοι = [&#39;Δημήτρης&#39;, &#39;Σοφία&#39;, &#39;Άρης&#39;]
for φίλος in φίλοι:
    print(&#39;Καλή χρονιά:&#39;, φίλος)
print(&#39;Τέλος!&#39;)</code></pre>
<p>Στην ορολογία της Python, η μεταβλητή <code>φίλοι</code> είναι μια λίστα<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a> τριών συμβολοσειρών και ο βρόχος <code>for</code> περνάει από τη λίστα και εκτελεί το σώμα μία φορά για καθεμιά από τις τρεις συμβολοσειρές στη λίστα, καταλήγοντας αυτήν την έξοδο:</p>
<pre class="python"><code>Καλή χρονιά: Δημήτρης
Καλή χρονιά: Σοφία
Καλή χρονιά: Άρης
Τέλος!</code></pre>
<p>Η μετάφραση αυτού του βρόχου <code>for</code> στα Αγγλικά δεν είναι τόσο άμεση όσο του <code>while</code>, αλλά αν σκεφτείτε τους φίλους ως ένα <em>σύνολο</em>, έχει ως εξής: “Εκτελέστε τις εντολές στο σώμα του βρόχου for μία φορά για κάθε φίλο <em>που ανήκει (in)</em> στο σετ με όνομα φίλοι.”</p>
<p>Κοιτάζοντας τον βρόχο <code>for</code>, το <em>for</em> και το <em>in</em> είναι δεσμευμένες λέξεις της Python και τα <code>φίλος</code> και <code>φίλοι</code> είναι μεταβλητές.</p>
<pre class="python"><code>for φίλος in φίλοι:
    print(&#39;Καλή χρονιά:&#39;, φίλος)</code></pre>
<p>Συγκεκριμένα, το <code>φίλος</code> είναι η <em>μεταβλητή επανάληψης</em> για τον βρόχο for. Η μεταβλητή <code>φίλος</code> αλλάζει σε κάθε επανάληψη του βρόχου και ελέγχει την ολοκλήρωση ο βρόχος <code>for</code>. Η <em>μεταβλητή επανάληψης</em> πέρνει διαδοχικά τις τιμές των τριών συμβολοσειρών που είναι αποθηκευμένες στη μεταβλητή <code>φίλοι</code>.</p>
<h2 id="μοτίβα-βρόχων">Μοτίβα βρόχων</h2>
<p>Συχνά χρησιμοποιούμε έναν βρόχο <code>for</code> ή <code>while</code> για να διατρέξουμε μια λίστα αντικειμένων ή τα περιεχόμενα ενός αρχείου και αναζητούμε κάτι όπως τη μεγαλύτερη ή τη μικρότερη τιμή των δεδομένων που σαρώνουμε.</p>
<p>Αυτοί οι βρόχοι κατασκευάζονται γενικά ως εξής:</p>
<ul>
<li><p>Αρχικοποίηση μιας ή περισσότερων μεταβλητών πριν από την έναρξη του βρόχου</p></li>
<li><p>Εκτέλεση ορισμένων υπολογισμών σε κάθε στοιχείο στο σώμα του βρόχου, πιθανώς αλλάζοντας τις μεταβλητές στο σώμα του βρόχου</p></li>
<li><p>Εξέταση των μεταβλητών που προκύπτουν όταν ολοκληρωθεί ο βρόχος</p></li>
</ul>
<p>Θα χρησιμοποιήσουμε μια λίστα αριθμών για να δείξουμε τις έννοιες και τον τρόπο κατασκευή αυτών των μοτίβων βρόχων.</p>
<h3 id="βρόχοι-μέτρησης-και-άθροισης">Βρόχοι μέτρησης και άθροισης</h3>
<p>Για παράδειγμα, για να μετρήσουμε τον αριθμό των στοιχείων σε μια λίστα, θα γράφαμε τον ακόλουθο βρόχο <code>for</code>:</p>
<pre class="python"><code>count = 0
for itervar in [3, 41, 12, 9, 74, 15]:
    count = count + 1
print(&#39;Count: &#39;, count)</code></pre>
<p>Αρχικοποιούμε τη μεταβλητή <code>count</code> με το μηδέν πριν ξεκινήσει ο βρόχος, και, στη συνέχεια, γράφουμε έναν βρόχο <code>for</code> για να διατρέξει τη λίστα των αριθμών. Η μεταβλητή <em>επανάληψης</em> ονομάζεται <code>itervar</code> και ενώ δεν χρησιμοποιούμε το <code>itervar</code> μέσα στον βρόχο, ελέγχει τον βρόχο και προκαλεί την εκτέλεση του σώματος του βρόχου μία φορά για καθεμία από τις τιμές στη λίστα.</p>
<p>Στο σώμα του βρόχου, προσθέτουμε 1 στην τρέχουσα τιμή του <code>count</code> για καθεμία από τις τιμές στη λίστα. Ενώ εκτελείται ο βρόχος, η τιμή του <code>count</code> είναι το πλήθος των τιμών που έχουμε δει «μέχρι στιγμής».</p>
<p>Μόλις ολοκληρωθεί ο βρόχος, η τιμή του <code>count</code> είναι ο συνολικός αριθμός των στοιχείων. Ο συνολικός αριθμός «πέφτει στην αγκαλιά μας» στο τέλος του βρόχου. Κατασκευάζουμε τον βρόχο έτσι ώστε να έχουμε αυτό που θέλουμε όταν τελειώσει ο βρόχος.</p>
<p>Άλλος ένας, παρόμοιος βρόχος, που υπολογίζει το άθροισμα ενός συνόλου αριθμών είναι ο εξής:</p>
<pre class="python"><code>total = 0
for itervar in [3, 41, 12, 9, 74, 15]:
    total = total + itervar
print(&#39;Total: &#39;, total)</code></pre>
<p>Σε αυτόν τον βρόχο <em>χρησιμοποιούμε</em> τη <em>μεταβλητή επανάληψης</em>. Αντί απλώς να προσθέσουμε ένα στο <code>count</code> όπως στον προηγούμενο βρόχο, προσθέτουμε τον πραγματικό αριθμό (3, 41, 12, κ.λπ.) στο τρέχον σύνολο κατά τη διάρκεια κάθε επανάληψης του βρόχου. Αν σκεφτείτε τη μεταβλητή <code>total</code>, περιέχει το «τρέχον σύνολο των μέχρι στιγμής τιμών». Έτσι, πριν ξεκινήσει ο βρόχος, το <code>total</code> είναι μηδέν, επειδή δεν έχουμε δει ακόμη τιμές, κατά τη διάρκεια του βρόχου το <code>total</code> είναι το τρέχον σύνολο και στο τέλος του βρόχου το <code>total</code> είναι το γενικό σύνολο όλων των τιμών στο λίστα.</p>
<p>Καθώς εκτελείται ο βρόχος, στο <code>total</code> συσσωρεύεται το άθροισμα των στοιχείων. Μια μεταβλητή που χρησιμοποιείται με αυτόν τον τρόπο μερικές φορές ονομάζεται <em>αθροιστής - accumulator</em>.</p>
<p> </p>
<p>Ούτε ο βρόχος μέτρησης ούτε ο βρόχος άθροισης είναι ιδιαίτερα χρήσιμοι στην πράξη επειδή υπάρχουν οι ενσωματωμένες συναρτήσεις <code>len()</code> και <code>sum()</code> που υπολογίζουν τον αριθμό των στοιχείων σε μια λίστα και το σύνολο των στοιχείων στη λίστα αντίστοιχα.</p>
<h3 id="βρόχοι-μέγιστου-και-ελάχιστου">Βρόχοι μέγιστου και ελάχιστου</h3>
<p>   </p>
<p>Για να βρούμε τη μεγαλύτερη τιμή σε μια λίστα ή ακολουθία, κατασκευάζουμε τον ακόλουθο βρόχο:</p>
<pre class="python"><code>μέγιστο = None
print(&#39;Πριν:&#39;, μέγιστο)
for αριθμός in [3, 41, 12, 9, 74, 15]:
    if μέγιστο is None or αριθμός &gt; μέγιστο :
        μέγιστο = αριθμός
    print(&#39;Εκτέλεση:&#39;, αριθμός, μέγιστο)
print(&#39;Μέγιστο:&#39;, μέγιστο)</code></pre>
<p>Όταν το πρόγραμμα εκτελείται, η έξοδος είναι η εξής:</p>
<pre class="{text}"><code>Πριν: None
Εκτέλεση: 3 3
Εκτέλεση: 41 41
Εκτέλεση: 12 41
Εκτέλεση: 9 41
Εκτέλεση: 74 74
Εκτέλεση: 15 74
Μέγιστο: 74</code></pre>
<p>Τη μεταβλητή <code>μέγιστο</code> είναι καλύτερα να τη σκέφτεστε ως τη «μεγαλύτερη τιμή που έχουμε δει μέχρι τώρα». Πριν από τον βρόχο, αρχικοποιήσαμε το <code>μέγιστο</code> με τη σταθερά <code>None</code>. Το <code>None</code> είναι μια ειδική σταθερή τιμή την οποία μπορούμε να αποθηκεύσουμε σε μια μεταβλητή για να επισημάνουμε τη μεταβλητή ως «κενή».</p>
<p>Πριν ξεκινήσει ο βρόχος, η μεγαλύτερη τιμή που έχουμε δει μέχρι στιγμής είναι <code>None</code>, καθώς δεν έχουμε δει ακόμη τιμές. Ενώ εκτελείται ο βρόχος, εάν το <code>μέγιστο</code> είναι <code>None</code>, τότε παίρνουμε την πρώτη τιμή που βλέπουμε ως τη μεγαλύτερη μέχρι στιγμής. Μπορείτε να δείτε στην πρώτη επανάληψη πότε η τιμή του <code>αριθμός</code> είναι 3, αφού το <code>μέγιστο</code> είναι <code>None</code>, ορίσαμε αμέσως το <code>μέγιστο</code> σε 3.</p>
<p>Μετά την πρώτη επανάληψη, το <code>μέγιστο</code> δεν είναι πλέον <code>None</code>, επομένως ενεργοποιείται το δεύτερο μέρος της σύνθετης λογικής έκφρασης που ελέγχει το <code>αριθμός &gt; μέγιστο</code>, μόνο όταν βλέπουμε μια τιμή μεγαλύτερη από τη «μεγαλύτερη μέχρι τώρα». Όταν βλέπουμε μια νέα τιμή “ακόμη μεγαλύτερη”, παίρνουμε αυτή τη νέα τιμή για <code>μέγιστο</code>. Μπορείτε να δείτε στην έξοδο του προγράμματος ότι το <code>μέγιστο</code> προχωρά από 3 σε 41 σε 74.</p>
<p>Στο τέλος του βρόχου, έχουμε σαρώσει όλες τις τιμές και η μεταβλητή <code>μέγιστο</code> περιέχει τώρα τη μεγαλύτερη τιμή στη λίστα.</p>
<p>Για τον υπολογισμό του μικρότερου αριθμού, ο κώδικας είναι παρόμοιος με μια μικρή αλλαγή:</p>
<pre class="python"><code>ελάχιστο = None
print(&#39;Πριν:&#39;, ελάχιστο)
for αριθμός in [3, 41, 12, 9, 74, 15]:
    if ελάχιστο is None or αριθμός &lt; smallest:
        ελάχιστο = αριθμός
    print(&#39;Εκτέλεση:&#39;, αριθμός, ελάχιστο)
print(&#39;Ελάχιστο:&#39;, ελάχιστο)</code></pre>
<p>Και πάλι, το <code>ελάχιστο</code> είναι το “μικρότερο μέχρι στιγμής” πριν, κατά τη διάρκεια και μετά την εκτέλεση του βρόχου. Όταν ολοκληρωθεί ο βρόχος, το <code>ελάχιστο</code> περιέχει την ελάχιστη τιμή στη λίστα.</p>
<p>Και πάλι, όπως και στην καταμέτρηση και την άθροιση, οι ενσωματωμένες συναρτήσεις <code>max()</code> και <code>min()</code> καθιστούν περιττή τη γραφή των παραπάνω βρόχων.</p>
<p>Το ακόλουθο είναι μια απλή έκδοση της ενσωματωμένης συνάρτησης <code>min()</code> της Python:</p>
<pre class="python"><code>def min(τιμές):
    ελάχιστο = None
    for αριθμός in τιμές:
        if ελάχιστο is None or αριθμός &lt; ελάχιστο:
            ελάχιστο = αριθμός
    return ελάχιστο</code></pre>
<p>Στην εκδοχή της συνάρτησης του μικρότερου κώδικα, αφαιρέσαμε όλες τις εντολές <code>print</code> και χρησιμοποιήσαμε τα αντίστοιχα αγγλικά ονόματα μεταβλητών, ώστε να είναι ισοδύναμη με τη συνάρτηση <code>min</code> που είναι ήδη ενσωματωμένη στην Python.</p>
<h2 id="εκσφαλμάτωση">Εκσφαλμάτωση</h2>
<p>Καθώς αρχίζετε να γράφετε μεγαλύτερα προγράμματα, μπορεί να χριαστεί να ξοδέψετε περισσότερος χρόνος εκσφαλμάτωσης. Περισσότερος κώδικας σημαίνει περισσότερες πιθανότητες να κάνετε λάθος και περισσότερα μέρη που κρύβουν σφάλματα.</p>
<p> </p>
<p>Ένας τρόπος για να μειώσετε το χρόνο εντοπισμού και διόρθωσης σφαλμάτων είναι η “εκσφαλμάτωση με διχοτόμηση”. Για παράδειγμα, εάν υπάρχουν 100 γραμμές στο πρόγραμμά σας και τις ελέγξετε μία κάθε φορά, θα χρειαστείτε 100 βήματα.</p>
<p>Αντίθετα, προσπαθήστε να σπάσετε το πρόβλημα στο μισό. Κοιτάξτε στη μέση του προγράμματος ή κοντά σε αυτήν, για μια ενδιάμεση τιμή που μπορείτε να ελέγξετε. Προσθέστε μια εντολή <code>print</code> (ή κάτι άλλο που έχει επαληθεύσιμο αποτέλεσμα) και εκτελέστε το πρόγραμμα.</p>
<p>Εάν ο έλεγχος στο μέσο σημείο είναι λανθασμένος, το πρόβλημα πρέπει να βρίσκεται στο πρώτο μισό του προγράμματος. Αν είναι σωστός, το πρόβλημα βρίσκεται στο δεύτερο μισό.</p>
<p>Κάθε φορά που εκτελείτε έναν έλεγχο όπως αυτόν, μειώνετε στο μισό τον αριθμό των γραμμών που πρέπει να ελέγξετε. Μετά από έξι βήματα (τα οποία είναι πολύ λιγότερα από 100), θα καταλήξετε σε μία ή δύο γραμμές κώδικα, τουλάχιστον θεωρητικά.</p>
<p>Στην πράξη δεν είναι πάντα σαφές ποιο είναι το “μέσο του προγράμματος” και δεν είναι πάντα δυνατό να το ελέγξουμε. Δεν έχει νόημα να μετράμε γραμμές και να βρίσκουμε το ακριβές μέσο. Αντίθετα, σκεφτείτε μέρη στο πρόγραμμα όπου μπορεί να υπάρχουν σφάλματα και μέρη στα οποία είναι εύκολο να βάλετε έναν έλεγχο. Στη συνέχεια, επιλέξτε ένα σημείο όπου πιστεύετε ότι οι πιθανότητες είναι περίπου οι ίσες για τις περιπτώσεις το σφάλμα να είναι πριν ή μετά τον έλεγχο.</p>
<h2 id="γλωσσάριο">Γλωσσάριο</h2>
<dl>
<dt>αθροιστής</dt>
<dd>Μια μεταβλητή που χρησιμοποιείται σε έναν βρόχο για να υπολογίσει ένα άθροισμα
</dd>
<dt>αρχικοποίηση</dt>
<dd>Μια εκχώρηση που δίνει μια αρχική τιμή σε μια μεταβλητή που θα ενημερωθεί.
</dd>
<dt>ατρέρμων βρόχος</dt>
<dd>Ένας βρόχος στον οποίο η συνθήκη τερματισμού δεν ικανοποιείται ποτέ ή για τον οποίο δεν υπάρχει τερματική συνθήκη.
</dd>
<dt>αύξηση</dt>
<dd>Μια ενημέρωση που αυξάνει την τιμή μιας μεταβλητής (συχνά κατά ένα).
</dd>
<dt>επανάληψη</dt>
<dd>Επαναλαμβανόμενη εκτέλεση ενός συνόλου εντολών χρησιμοποιώντας είτε μια συνάρτηση που καλεί τον εαυτό της είτε έναν βρόχο.
</dd>
<dt>μείωση</dt>
<dd>Μια ενημέρωση που μειώνει την τιμή μιας μεταβλητής.
</dd>
<dt>μετρητής</dt>
<dd>Μια μεταβλητή που χρησιμοποιείται σε έναν βρόχο για να μετρήσει πόσες φορές συνέβη κάτι. Αρχικοποιούμε έναν μετρητή με το μηδέν και μετά αυξάνουμε τον μετρητή κάθε φορά που θέλουμε να “μετρήσουμε” κάτι.
</dd>
</dl>
<h2 id="ασκήσεις">Ασκήσεις</h2>
<p><strong>Άσκηση 1: Γράψτε ένα πρόγραμμα, το οποίο διαβάζει επαναληπτικά αριθμούς μέχρι ο χρήστης να εισάγει <code>τέλος</code>. Όταν εισαχθεί <code>τέλος</code>, εκτυπώνει το άθροισμα, το πλήθος και τον μέσο όρο των αριθμών. Εάν ο χρήστης εισάγει οτιδήποτε άλλο εκτός από αριθμούς, εντοπίζει το λάθος με χρήση των <code>try</code> και <code>except</code>, εκτυπώνει ένα μήνυμα λάθους και ζητά τον επόμενο αριθμό.</strong></p>
<pre class="{text}"><code>Εισάγετε έναν αριθμό: 4
Εισάγετε έναν αριθμό: 5
Εισάγετε έναν αριθμό: bad data
Μη έγκυρη είσοδος
Εισάγετε έναν αριθμό: 7
Εισάγετε έναν αριθμό: τέλος
16 3 5.333333333333333</code></pre>
<p><strong>Άσκηση 2: Γράψτε ένα άλλο πρόγραμμα, το οποίο ζητά μια λίστα αριθμών, όπως και παραπάνω και στο τέλος εκτυπώνει το μέγιστο και το ελάχιστο όλων των αριθμών αντί για τον μέσο όρο.</strong></p>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>Θα εξετάσουμε λεπτομερέστερα τις λίστες σε επόμενο κεφάλαιο.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
</body>
</html>
<?php if ( file_exists("../bookfoot.php") ) {
  $HTML_FILE = basename(__FILE__);
  $HTML = ob_get_contents();
  ob_end_clean();
  require_once "../bookfoot.php";
}?>
