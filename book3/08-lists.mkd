
Λίστες
======

\index{list}
\index{λίστα}
\index{τύπος!list}
\index{τύπος!λίστα}

Μια λίστα είναι μια ακολουθία
-----------------------------

Όπως και μια συμβολοσειρά, μια *list* είναι μια ακολουθία τιμών. Σε μια
συμβολοσειρά, οι τιμές είναι χαρακτήρες ενώ σε μια λίστα, μπορούν να είναι
οποιουδήποτε τύπου. Οι τιμές στη λίστα ονομάζονται *στοιχεία* (*elements* ή
μερικές φορές *items*).

\index{στοιχείο}
\index{ακολουθία}
\index{element}
\index{item}

Υπάρχουν διάφοροι τρόποι για να δημιουργήσετε μια νέα λίστα. Ο πιο απλός είναι
να περικλείσετε τα στοιχεία σε αγκύλες ("[" και "]"):

~~~~ {.python}
[10, 20, 30, 40]
['crunchy frog', 'ram bladder', 'lark vomit']
~~~~

Το πρώτο παράδειγμα είναι μια λίστα τεσσάρων ακεραίων αριθμών. Η δεύτερη είναι
μια λίστα τριών συμβολοσειρών. Τα στοιχεία μιας λίστας δεν χρειάζεται να είναι
του ίδιου τύπου. Η ακόλουθη λίστα περιέχει μια συμβολοσειρά, ένα δεκαδικό, έναν
ακέραιο, και (ορίστε!) μια νέα λίστα:

~~~~ {.python}
['spam', 2.0, 5, [10, 20]]
~~~~

Μια λίστα σε μια άλλη λίστα είναι *εμφωλευμένη*.

\index{εμφωλευμένη λίστα}
\index{λίστα!εμφωλευμένη}

Μια λίστα που δεν περιέχει στοιχεία ονομάζεται κενή λίστα. Μπορείτε να
δημιουργήσετε μία με κενές αγκύλες, `[]`.

\index{κενή λίστα}
\index{λίστα!κενή}

Όπως θα περίμενε κανείς, μπορείτε να εκχωρήσετε τιμές λίστας σε μεταβλητές:

~~~~ {.python .trinket}
>>> τυριά = ['Cheddar', 'Edam', 'Gouda']
>>> αριθμοί = [17, 123]
>>> κενή = []
>>> print(τυριά, αριθμοί, κενή)
['Cheddar', 'Edam', 'Gouda'] [17, 123] []
~~~~

\index{εκχώρηση}

Οι λίστες είναι μεταβαλόμενες
-----------------------------

\index{λίστα!στοιχείο}
\index{πρόσβαση}
\index{δείκτης}
\index{αγκύλη τελεστής}
\index{τελεστής!αγκύλη}

Η σύνταξη, για την πρόσβαση στα στοιχεία μιας λίστας, είναι η ίδια με αυτήν της
πρόσβασης στους χαρακτήρες μιας συμβολοσειράς: ο τελεστής αγκύλης. Η έκφραση
μέσα στις αγκύλες καθορίζει το δείκτη. Θυμηθείτε ότι οι δείκτες ξεκινούν από
το 0:

~~~~ {.python}
>>> print(τυριά[0])
Cheddar
~~~~

Σε αντίθεση με τις συμβολοσειρές, οι λίστες είναι μεταβλητές, μπορείτε δηλαδή
να αλλάξετε τη σειρά των στοιχείων μιας λίστας ή να εκχωρήσετε εκ νέου ένα
στοιχείο σε μια λίστα. Όταν ο τελεστής αγκύλης εμφανίζεται στην αριστερή πλευρά
μιας ανάθεσης, προσδιορίζει το στοιχείο της λίστας που θα τροποποιηθεί.

\index{mutability}
\index{μεταβλητότητα}

~~~~ {.python .trinket}
>>> numbers = [17, 123]
>>> numbers[1] = 5
>>> print(numbers)
[17, 5]
~~~~

Το στοιχείο στη θέση ένα της `numbers`, που ήταν 123, είναι τώρα 5.

\index{δείκτης!έναρξη από μηδέν}
\index{μηδέν, έναρξη του δείκτη}

Μπορείτε να σκεφτείτε μια λίστα ως μια σχέση μεταξύ δεικτών και στοιχείων.
Αυτή η σχέση ονομάζεται *χαρτογράφηση (mapping)*. Κάθε δείκτης
"αντιστοιχίζεται" σε ένα από τα στοιχεία.

\index{στοιχείο εκχώρηση}
\index{εκχώρηση!στοιχείο}

Οι δείκτες λιστών λειτουργούν με τον ίδιο τρόπο όπως οι δείκτες συμβολοσειρών:

-   Οποιαδήποτε ακέραια έκφραση μπορεί να χρησιμοποιηθεί ως ευρετήριο.

-   Εάν προσπαθήσετε να διαβάσετε ή να γράψετε ένα στοιχείο που δεν υπάρχει,
    λαμβάνετε ένα `IndexError`.

\index{exception!IndexError}
\index{IndexError}

-   Εάν ένας δείκτης έχει αρνητική τιμή, μετράει αντίστροφα από το τέλος της
    λίστας.

\index{λίστα!δείκτης}
\index{λίστα!ιδιότητα μέλους}
\index{ιδιότητα μέλους!λίστα}
\index{in τελεστής}
\index{τελεστής!in}

Ο τελεστής `in` λειτουργεί και σε λίστες.

~~~~ {.python .trinket}
>>> τυριά = ['Cheddar', 'Edam', 'Gouda']
>>> 'Edam' in τυριά
True
>>> 'Brie' in τυριά
False
~~~~

Διάσχιση λίστα
--------------

\index{λίστα!διάσχιση}
\index{διάσχιση!λίστα}
\index{for βρόχος}
\index{βρόχος!for}
\index{εντολή!for}

Ο πιο συνηθισμένος τρόπος για να διασχίσετε τα στοιχεία μιας λίστας είναι με
έναν βρόχο `for`. Η σύνταξη είναι η ίδια με τις συμβολοσειρές:

~~~~ {.python}
for τυρί in τυριά:
    print(τυρί)
~~~~

Αυτή η μορφή λειτουργεί καλά εάν χρειάζεται μόνο να διαβάσετε τα στοιχεία της
λίστας. Αλλά αν θέλετε να γράψετε ή να ενημερώσετε τα στοιχεία, χρειάζεστε τους
δείκτες. Ένας συνηθισμένος τρόπος για να γίνει αυτό είναι ο συνδυασμός των
συναρτήσεων `range` και `len`:

\index{επανάληψη!με δείκτες}
\index{δείκτης!επανάληψη με}

~~~~ {.python}
for i in range(len(αριθμοί)):
    αριθμοί[i] = αριθμοί[i] * 2
~~~~

Αυτός ο βρόχος διασχίζει τη λίστα και ενημερώνει κάθε στοιχείο. Το `len`
επιστρέφει το πλήθος των στοιχείων της λίστας. Το `range` επιστρέφει μια λίστα
δεικτών από 0 έως $n-1$, όπου το $n$ είναι το μήκος της λίστας. Κάθε φορά μέσω
του βρόχου, το `i` λαμβάνει τον δείκτη του επόμενου στοιχείου. Η δήλωση
ανάθεσης στο σώμα χρησιμοποιεί το `i` για να διαβάσει την παλιά τιμή του
στοιχείου και να εκχωρήσει τη νέα τιμή.

\index{στοιχείο, ενημέρωση}
\index{ενημέρωση!στοιχείο}

Ένας βρόχος `for` σε μια κενή λίστα δεν εκτελεί ποτέ το σώμα:

~~~~ {.python}
for x in κενή:
    print('Αυτό δεν εκτελείται ποτέ.')
~~~~

Αν και μια λίστα μπορεί να περιέχει μια άλλη λίστα, η ένθετη λίστα εξακολουθεί
να υπολογίζεται ως ένα μεμονωμένο στοιχείο. Το μήκος της λίστας, στο παρακάτω
παράδειγμα, είναι τέσσερα:

\index{εμφωλευμένη λίστα}
\index{λίστα!εμφωλευμένη}

~~~~ {.python}
['spam', 1, ['Brie', 'Roquefort', 'Pol le Veq'], [1, 2, 3]]
~~~~

Λειτουργίες λίστας
------------------

\index{λίστα!λειτουργία}

Ο τελεστής `+` συνενώνει λίστες:

\index{συνένωση!λίστα}
\index{λίστα!συνένωση}

~~~~ {.python .trinket}
>>> a = [1, 2, 3]
>>> b = [4, 5, 6]
>>> c = a + b
>>> print(c)
[1, 2, 3, 4, 5, 6]
~~~~

Ομοίως, ο τελεστής `*` επαναλαμβάνει μια λίστα πολλές φορές:

\index{επανάληψη!λίστα}
\index{λίστα!επανάληψη}

~~~~ {.python .trinket}
>>> [0] * 4
[0, 0, 0, 0]
>>> [1, 2, 3] * 3
[1, 2, 3, 1, 2, 3, 1, 2, 3]
~~~~

Το πρώτο παράδειγμα επαναλαμβάνεται την πρώτη λίστα τέσσερις φορές και το
δεύτερο τρεις φορές.

Διαμέριση λίστας
----------------

\index{διαμέριση τελεστής}
\index{τελεστής!διαμέριση}
\index{δείκτης!διαμέριση}
\index{λίστα!διαμέριση}
\index{διαμέριση!λίστα}

Ο τελεστής διαμέρισης λειτουργεί και σε λίστες:

~~~~ {.python .trinket}
>>> t = ['a', 'b', 'c', 'd', 'e', 'f']
>>> t[1:3]
['b', 'c']
>>> t[:4]
['a', 'b', 'c', 'd']
>>> t[3:]
['d', 'e', 'f']
~~~~

Εάν παραλείψετε τον πρώτο δείκτη, το τμήμα ξεκινά από την αρχή της λίστας. Αν
παραλείψετε τον δεύτερο, το τμήμα φτάνει μέχρι το τέλος της λίστας. Έτσι, εαν
παραλείψετε και τους δύο, το τμήμα είναι αντίγραφο ολόκληρης της λίστας.

\index{λίστα!αντίγραφο}
\index{τμήμα!αντίγραφο}
\index{αντίγραφο!τμήμα}

~~~~ {.python}
>>> t[:]
['a', 'b', 'c', 'd', 'e', 'f']
~~~~

Δεδομένου ότι οι λίστες είναι μεταβαλλόμενες, είναι συχνά χρήσιμο να
δημιουργείτε ένα αντίγραφο πριν εκτελέσετε λειτουργίες που διπλώνουν, ατρακτοποιούν ή ακρωτηριάζουν λίστες.

Since lists are mutable, it is often useful to make a copy before
performing operations that fold, spindle, or mutilate lists.

\index{μεταβλητότητα}

Ένας τελεστής διαμέρισης στο αριστερό μέλος μιας ανάθεσης μπορεί να ενημερώσει
πολλά στοιχεία ταυτόχρονα:

\index{διαμέριση!ενημέρωση}
\index{ενημέρωση!διαμέριση}

~~~~ {.python .trinket}
>>> t = ['a', 'b', 'c', 'd', 'e', 'f']
>>> t[1:3] = ['x', 'y']
>>> print(t)
['a', 'x', 'y', 'd', 'e', 'f']
~~~~

Μέθοδοι λίστας
--------------

\index{λίστα!μέθοδος}
\index{μέθοδος, λίστα}

Η Python παρέχει μεθόδους που λειτουργούν σε λίστες. Για παράδειγμα, η
`append` προσθέτει ένα νέο στοιχείο στο τέλος μιας λίστας:

\index{append μέθοδος}
\index{μέθοδος!append}

~~~~ {.python .trinket}
>>> t = ['a', 'b', 'c']
>>> t.append('d')
>>> print(t)
['a', 'b', 'c', 'd']
~~~~

Η `extend` παίρνει μια λίστα ως όρισμα και προσθέτει όλα τα στοιχεία της στην
λίστα στην οποία εφαρμόστηκε:

\index{extend μέθοδος}
\index{μέθοδος!extend}

~~~~ {.python .trinket}
>>> t1 = ['a', 'b', 'c']
>>> t2 = ['d', 'e']
>>> t1.extend(t2)
>>> print(t1)
['a', 'b', 'c', 'd', 'e']
~~~~

Αυτό το παράδειγμα δεν τροποποιεί το `t2`.

Η `sort` ταξινομεί τα στοιχεία της λίστας από το μικρότερο προς το μεγαλύτερο:

\index{sort μέθοδος}
\index{μέθοδος!sort}

~~~~ {.python .trinket}
>>> t = ['d', 'c', 'e', 'b', 'a']
>>> t.sort()
>>> print(t)
['a', 'b', 'c', 'd', 'e']
~~~~

Οι περισσότερες μέθοδοι λίστας είναι κενές. Τροποποιούν τη λίστα και
επιστρέφουν `None`. Αν κατά λάθος γράψετε `t = t.sort()`, θα απογοητευτείτε
με το αποτέλεσμα.

\index{void μέθοδος}
\index{μέθοδος!void}
\index{None ειδική τιμή}
\index{ειδική τιμή!None}

Διαγραφή στοιχείων
------------------

\index{στοιχείο διαγραφή}
\index{διαγραφή, στοιχείο λίστας}

Υπάρχουν διάφοροι τρόποι για να διαγράψετε στοιχεία από μια λίστα. Εάν
γνωρίζετε το ευρετήριο του στοιχείου που θέλετε ν διαγράψετε, μπορείτε να
χρησιμοποιήσετε την `pop`:

\index{pop μέθοδος}
\index{μέθοδος!pop}

~~~~ {.python .trinket}
>>> t = ['a', 'b', 'c']
>>> x = t.pop(1)
>>> print(t)
['a', 'c']
>>> print(x)
b
~~~~

Η `pop` τροποποιεί τη λίστα και επιστρέφει το στοιχείο που αφαιρέθηκε. Εάν δεν
δώσετε κάποιον δείκτη, διαγράφει και επιστρέφει το τελευταίο στοιχείο.

Εάν δεν χρειάζεστε την καταργημένη τιμή, μπορείτε να χρησιμοποιήσετε την εντολή
`del`:

\index{del εντολή}
\index{εντολή!del}

~~~~ {.python .trinket}
>>> t = ['a', 'b', 'c']
>>> del t[1]
>>> print(t)
['a', 'c']
~~~~

If you know the element you want to remove (but not the index), you can
use `remove`:

\index{remove method}
\index{method!remove}

~~~~ {.python .trinket}
>>> t = ['a', 'b', 'c']
>>> t.remove('b')
>>> print(t)
['a', 'c']
~~~~

The return value from `remove` is `None`.

\index{None special value}
\index{special value!None}

To remove more than one element, you can use `del` with a
slice index:

~~~~ {.python .trinket}
>>> t = ['a', 'b', 'c', 'd', 'e', 'f']
>>> del t[1:5]
>>> print(t)
['a', 'f']
~~~~

As usual, the slice selects all the elements up to, but not including,
the second index.

Lists and functions
-------------------

There are a number of built-in functions that can be used on lists that
allow you to quickly look through a list without writing your own loops:

~~~~ {.python .trinket}
>>> nums = [3, 41, 12, 9, 74, 15]
>>> print(len(nums))
6
>>> print(max(nums))
74
>>> print(min(nums))
3
>>> print(sum(nums))
154
>>> print(sum(nums)/len(nums))
25
~~~~

The `sum()` function only works when the list elements are
numbers. The other functions (`max()`, `len()`,
etc.) work with lists of strings and other types that can be comparable.

We could rewrite an earlier program that computed the average of a list
of numbers entered by the user using a list.

First, the program to compute an average without a list:

\VerbatimInput{../code3/avenum.py}

In this program, we have `count` and `total`
variables to keep the number and running total of the user's numbers as
we repeatedly prompt the user for a number.

We could simply remember each number as the user entered it and use
built-in functions to compute the sum and count at the end.

\VerbatimInput{../code3/avelist.py}

We make an empty list before the loop starts, and then each time we have
a number, we append it to the list. At the end of the program, we simply
compute the sum of the numbers in the list and divide it by the count of
the numbers in the list to come up with the average.

Lists and strings
-----------------

\index{list}
\index{string}
\index{sequence}

A string is a sequence of characters and a list is a sequence of values,
but a list of characters is not the same as a string. To convert from a
string to a list of characters, you can use `list`:

\index{list!function}
\index{function!list}

~~~~ {.python .trinket}
>>> s = 'spam'
>>> t = list(s)
>>> print(t)
['s', 'p', 'a', 'm']
~~~~

Because `list` is the name of a built-in function, you should
avoid using it as a variable name. I also avoid the letter
"l" because it looks too much like the number "1".
So that's why I use "t".

The `list` function breaks a string into individual letters.
If you want to break a string into words, you can use the
`split` method:

\index{split method}
\index{method!split}

~~~~ {.python .trinket}
>>> s = 'pining for the fjords'
>>> t = s.split()
>>> print(t)
['pining', 'for', 'the', 'fjords']
>>> print(t[2])
the
~~~~

Once you have used `split` to break the string into a list of
words, you can use the index operator (square bracket) to look at a
particular word in the list.

You can call `split` with an optional argument called a
*delimiter* that specifies which characters to use as
word boundaries. The following example uses a hyphen as a delimiter:

\index{optional argument}
\index{argument!optional}
\index{delimiter}

~~~~ {.python .trinket}
>>> s = 'spam-spam-spam'
>>> delimiter = '-'
>>> s.split(delimiter)
['spam', 'spam', 'spam']
~~~~

`join` is the inverse of `split`. It takes a list
of strings and concatenates the elements. `join` is a string
method, so you have to invoke it on the delimiter and pass the list as a
parameter:

\index{join method}
\index{method!join}
\index{concatenation}

~~~~ {.python .trinket}
>>> t = ['pining', 'for', 'the', 'fjords']
>>> delimiter = ' '
>>> delimiter.join(t)
'pining for the fjords'
~~~~

In this case the delimiter is a space character, so `join`
puts a space between words. To concatenate strings without spaces, you
can use the empty string, "", as a delimiter.

\index{empty string}
\index{string!empty}

Parsing lines
-------------

Usually when we are reading a file we want to do something to the lines
other than just printing the whole line. Often we want to find the
"interesting lines" and then *parse* the line to find
some interesting *part* of the line. What if we wanted to print out the
day of the week from those lines that start with "From "?

~~~~{text}
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
~~~~

The `split` method is very effective when faced with this
kind of problem. We can write a small program that looks for lines where
the line starts with "From ", `split` those lines, and then
print out the third word in the line:

\VerbatimInput{../code3/search5.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

The program produces the following output:

~~~{text}
    Sat
    Fri
    Fri
    Fri
    ...
~~~

Later, we will learn increasingly sophisticated techniques for picking
the lines to work on and how we pull those lines apart to find the exact
bit of information we are looking for.

Objects and values
------------------

\index{object}
\index{value}

If we execute these assignment statements:

~~~~ {.python}
a = 'banana'
b = 'banana'
~~~~

we know that `a` and `b` both refer to a string,
but we don't know whether they refer to the *same* string. There are two
possible states:

\index{aliasing}

![Variables and Objects](height=0.5in@../images/list1)

In one case, `a` and `b` refer to two different
objects that have the same value. In the second case, they refer to the
same object.

\index{is operator}
\index{operator!is}

To check whether two variables refer to the same object, you can use the
`is` operator.

~~~~ {.python .trinket}
>>> a = 'banana'
>>> b = 'banana'
>>> a is b
True
~~~~

In this example, Python only created one string object, and both
`a` and `b` refer to it.

But when you create two lists, you get two objects:

~~~~ {.python .trinket}
>>> a = [1, 2, 3]
>>> b = [1, 2, 3]
>>> a is b
False
~~~~

In this case we would say that the two lists are
*equivalent*, because they have the same elements, but
not *identical*, because they are not the same object. If
two objects are identical, they are also equivalent, but if they are
equivalent, they are not necessarily identical.

\index{equivalence}
\index{identity}

Until now, we have been using "object" and "value" interchangeably, but
it is more precise to say that an object has a value. If you execute
`a = [1,2,3]`, `a` refers to a list object whose
value is a particular sequence of elements. If another list has the same
elements, we would say it has the same value.

\index{object}
\index{value}

Aliasing
--------

\index{aliasing}
\index{reference!aliasing}

If `a` refers to an object and you assign `b = a`,
then both variables refer to the same object:

~~~~ {.python .trinket}
>>> a = [1, 2, 3]
>>> b = a
>>> b is a
True
~~~~

The association of a variable with an object is called a
*reference*. In this example, there are two references to
the same object.

\index{reference}

An object with more than one reference has more than one name, so we say
that the object is *aliased*.

\index{mutability}

If the aliased object is mutable, changes made with one alias affect the
other:

~~~~ {.python}
>>> b[0] = 17
>>> print(a)
[17, 2, 3]
~~~~

Although this behavior can be useful, it is error-prone. In general, it
is safer to avoid aliasing when you are working with mutable objects.

\index{immutability}

For immutable objects like strings, aliasing is not as much of a
problem. In this example:

~~~~ {.python}
a = 'banana'
b = 'banana'
~~~~

it almost never makes a difference whether `a` and
`b` refer to the same string or not.

List arguments
--------------

\index{list!as argument}
\index{argument}
\index{argument!list}
\index{reference}
\index{parameter}

When you pass a list to a function, the function gets a reference to the
list. If the function modifies a list parameter, the caller sees the
change. For example, `delete_head` removes the first element from a
list:

~~~~ {.python}
def delete_head(t):
    del t[0]
~~~~

Here's how it is used:

~~~~ {.python .trinket}
>>> letters = ['a', 'b', 'c']
>>> delete_head(letters)
>>> print(letters)
['b', 'c']
~~~~

The parameter `t` and the variable `letters` are
aliases for the same object.

It is important to distinguish between operations that modify lists and
operations that create new lists. For example, the `append`
method modifies a list, but the `+` operator creates a new
list:

\index{append method}
\index{method!append}
\index{list!concatenation}
\index{concatenation!list}

~~~~ {.python .trinket}
>>> t1 = [1, 2]
>>> t2 = t1.append(3)
>>> print(t1)
[1, 2, 3]
>>> print(t2)
None

>>> t3 = t1 + [3]
>>> print(t3)
[1, 2, 3]
>>> t2 is t3
False
~~~~

This difference is important when you write functions that are supposed
to modify lists. For example, this function *does not* delete the head
of a list:

~~~~ {.python}
def bad_delete_head(t):
    t = t[1:]              # WRONG!
~~~~

The slice operator creates a new list and the assignment makes
`t` refer to it, but none of that has any effect on the list
that was passed as an argument.

\index{slice operator}
\index{operator!slice}

An alternative is to write a function that creates and returns a new
list. For example, `tail` returns all but the first element
of a list:

~~~~ {.python}
def tail(t):
    return t[1:]
~~~~

This function leaves the original list unmodified. Here's how it is
used:

~~~~ {.python .trinket}
>>> letters = ['a', 'b', 'c']
>>> rest = tail(letters)
>>> print(rest)
['b', 'c']
~~~~

**Exercise 1: Write a function called `chop` that takes a list and modifies
it, removing the first and last elements, and returns `None`. Then write a function called `middle` that takes a list and returns a new list that contains all but the first and last elements.**

Debugging
---------

\index{debugging}

Careless use of lists (and other mutable objects) can lead to long hours
of debugging. Here are some common pitfalls and ways to avoid them:

1.  Don't forget that most list methods modify the argument and return
    `None`. This is the opposite of the string methods, which
    return a new string and leave the original alone.

    If you are used to writing string code like this:

    ~~~~ {.python}
    word = word.strip()
    ~~~~

    It is tempting to write list code like this:

    ~~~~ {.python}
    t = t.sort()           # WRONG!
    ~~~~

    \index{sort method}
    \index{method!sort}

    Because `sort` returns `None`, the next
    operation you perform with `t` is likely to fail.

    Before using list methods and operators, you should read the
    documentation carefully and then test them in interactive mode. The
    methods and operators that lists share with other sequences (like
    strings) are documented at:

    [docs.python.org/library/stdtypes.html#common-sequence-operations](https://docs.python.org/library/stdtypes.html#common-sequence-operations)

    The methods and operators that only apply to mutable sequences are
    documented at:

    [docs.python.org/library/stdtypes.html#mutable-sequence-types](https://docs.python.org/library/stdtypes.html#mutable-sequence-types)

2.  Pick an idiom and stick with it.

    \index{idiom}

    Part of the problem with lists is that there are too many ways to do
    things. For example, to remove an element from a list, you can use
    `pop`, `remove`, `del`, or even a
    slice assignment.

    To add an element, you can use the `append` method or the
    `+` operator. But don't forget that these are right:

    ~~~~ {.python}
    t.append(x)
    t = t + [x]
    ~~~~

    And these are wrong:

    ~~~~ {.python}
    t.append([x])          # WRONG!
    t = t.append(x)        # WRONG!
    t + [x]                # WRONG!
    t = t + x              # WRONG!
    ~~~~

    Try out each of these examples in interactive mode to make sure you
    understand what they do. Notice that only the last one causes a
    runtime error; the other three are legal, but they do the wrong
    thing.

3.  Make copies to avoid aliasing.

    \index{aliasing!copying to avoid}
    \index{copy!to avoid aliasing}

    If you want to use a method like `sort` that modifies the
    argument, but you need to keep the original list as well, you can
    make a copy.

    ~~~~ {.python}
    orig = t[:]
    t.sort()
    ~~~~

    In this example you could also use the built-in function
    `sorted`, which returns a new, sorted list and leaves the
    original alone. But in that case you should avoid using
    `sorted` as a variable name!

4.  Lists, `split`, and files

    When we read and parse files, there are many opportunities to
    encounter input that can crash our program so it is a good idea to
    revisit the *guardian* pattern when it comes writing
    programs that read through a file and look for a "needle in the
    haystack".

    Let's revisit our program that is looking for the day of the week on
    the from lines of our file:

    ~~~~{text}
    From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
    ~~~~

    Since we are breaking this line into words, we could dispense with
    the use of `startswith` and simply look at the first word
    of the line to determine if we are interested in the line at all. We
    can use `continue` to skip lines that don't have "From"
    as the first word as follows:

    ~~~~ {.python}
    fhand = open('mbox-short.txt')
    for line in fhand:
        words = line.split()
        if words[0] != 'From' : continue
        print(words[2])
    ~~~~

    This looks much simpler and we don't even need to do the
    `rstrip` to remove the newline at the end of the file.
    But is it better?

    ~~~~{text}
    python search8.py
    Sat
    Traceback (most recent call last):
      File "search8.py", line 5, in <module>
        if words[0] != 'From' : continue
    IndexError: list index out of range
    ~~~~

    It kind of works and we see the day from the first line (Sat), but
    then the program fails with a traceback error. What went wrong? What
    messed-up data caused our elegant, clever, and very Pythonic program
    to fail?

    You could stare at it for a long time and puzzle through it or ask
    someone for help, but the quicker and smarter approach is to add a
    `print` statement. The best place to add the print
    statement is right before the line where the program failed and
    print out the data that seems to be causing the failure.

    Now this approach may generate a lot of lines of output, but at
    least you will immediately have some clue as to the problem at hand.
    So we add a print of the variable `words` right before
    line five. We even add a prefix "Debug:" to the line so we can keep
    our regular output separate from our debug output.

    ~~~~ {.python}
    for line in fhand:
        words = line.split()
        print('Debug:', words)
        if words[0] != 'From' : continue
        print(words[2])
    ~~~~

    When we run the program, a lot of output scrolls off the screen but
    at the end, we see our debug output and the traceback so we know
    what happened just before the traceback.

    ~~~~{text}
    Debug: ['X-DSPAM-Confidence:', '0.8475']
    Debug: ['X-DSPAM-Probability:', '0.0000']
    Debug: []
    Traceback (most recent call last):
      File "search9.py", line 6, in <module>
        if words[0] != 'From' : continue
    IndexError: list index out of range
    ~~~~

    Each debug line is printing the list of words which we get when we
    `split` the line into words. When the program fails, the
    list of words is empty `[]`. If we open the file in a text editor
    and look at the file, at that point it looks as follows:

    ~~~~{text}
    X-DSPAM-Result: Innocent
    X-DSPAM-Processed: Sat Jan  5 09:14:16 2008
    X-DSPAM-Confidence: 0.8475
    X-DSPAM-Probability: 0.0000

    Details: http://source.sakaiproject.org/viewsvn/?view=rev&rev=39772
    ~~~~

    The error occurs when our program encounters a blank line! Of course
    there are "zero words" on a blank line. Why didn't we think of that
    when we were writing the code? When the code looks for the first
    word (`word[0]`) to check to see if it matches "From", we get an
    "index out of range" error.

    This of course is the perfect place to add some
    *guardian* code to avoid checking the first word if
    the first word is not there. There are many ways to protect this
    code; we will choose to check the number of words we have before we
    look at the first word:

    ~~~~ {.python}
    fhand = open('mbox-short.txt')
    count = 0
    for line in fhand:
        words = line.split()
        # print('Debug:', words)
        if len(words) == 0 : continue
        if words[0] != 'From' : continue
        print(words[2])
    ~~~~

    First we commented out the debug print statement instead of removing
    it, in case our modification fails and we need to debug again. Then
    we added a guardian statement that checks to see if we have zero
    words, and if so, we use `continue` to skip to the next
    line in the file.

    We can think of the two `continue` statements as helping
    us refine the set of lines which are "interesting" to us and which
    we want to process some more. A line which has no words is
    "uninteresting" to us so we skip to the next line. A line which does
    not have "From" as its first word is uninteresting to us so we skip
    it.

    The program as modified runs successfully, so perhaps it is correct.
    Our guardian statement does make sure that the `words[0]`
    will never fail, but perhaps it is not enough. When we are
    programming, we must always be thinking, "What might go wrong?"

**Exercise 2: Figure out which line of the above program is still not
properly guarded. See if you can construct a text file which causes
the program to fail and then modify the program so that the line is
properly guarded and test it to make sure it handles your new text
file.**

**Exercise 3: Rewrite the guardian code in the above example without
two `if` statements. Instead, use a compound logical
expression using the `or` logical operator with a single
`if` statement.**

Glossary
--------

aliasing
:   A circumstance where two or more variables refer to the same object.
\index{aliasing}

delimiter
:   A character or string used to indicate where a string should be
    split.
\index{delimiter}

element
:   One of the values in a list (or other sequence); also called items.
\index{element}

equivalent
:   Having the same value.
\index{equivalent}

index
:   An integer value that indicates an element in a list.
\index{index}
\index{}

identical
:   Being the same object (which implies equivalence).
\index{identical}

list
:   A sequence of values.
\index{list}

list traversal
:   The sequential accessing of each element in a list.
\index{list!traversal}

nested list
:   A list that is an element of another list.
\index{nested list}

object
:   Something a variable can refer to. An object has a type and a value.
\index{object}

reference
:   The association between a variable and its value.
\index{reference}

Exercises
---------

\index{Romeo and Juliet}

**Exercise 4: Find all unique words in a file**

**Shakespeare used over 20,000 words in his works. But how would you determine that? How would you produce the list of all the words that Shakespeare used? Would you download all his work, read it and track all unique words by hand?**

**Let's use Python to achieve that instead. List all unique words, sorted in alphabetical order, that are stored in a file `romeo.txt` containing a subset of Shakespeare's work.**

**To get started, download a copy of the file**
[**www.py4e.com/code3/romeo.txt**](http://www.py4e.com/code3/romeo.txt)**.
Create a list of unique words, which will contain the final result.
Write a program to open the file `romeo.txt` and read it line
by line. For each line, split the line into a list of words using the
`split` function. For each word, check to see if the word is already in the list of unique words. If the word is not in the list of unique words, add it to the list.
When the program completes, sort and print the list of unique words in
alphabetical order.**

~~~~{text}
Enter file: romeo.txt
['Arise', 'But', 'It', 'Juliet', 'Who', 'already',
'and', 'breaks', 'east', 'envious', 'fair', 'grief',
'is', 'kill', 'light', 'moon', 'pale', 'sick', 'soft',
'sun', 'the', 'through', 'what', 'window',
'with', 'yonder']
~~~~

**Exercise 5: Minimalist Email Client.**

**MBOX (mail box) is a popular file format to store and share a collection of
emails. This was used by early email servers and desktop apps. Without getting
into too many details, MBOX is a text file, which stores emails consecutively.
Emails are separated by a special line which starts with `From` (notice the space).
Importantly, lines starting with `From:` (notice the colon) describes the email
itself and does not act as a separator.
Imagine you wrote a minimalist email app, that lists the email of the senders
in the user's Inbox and counts the number of emails.**

**Write a program to read through the mail box data and when
you find line that starts with "From", you will split the line into
words using the `split` function. We are interested in who
sent the message, which is the second word on the From line.**

~~~~{text}
From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008
~~~~

**You will parse the From line and print out the second word for each From
line, then you will also count the number of From (not From:) lines and
print out a count at the end. This is a good sample output with a few lines removed:**

~~~~{text}
python fromcount.py
Enter a file name: mbox-short.txt
stephen.marquard@uct.ac.za
louis@media.berkeley.edu
zqian@umich.edu

[...some output removed...]

ray@media.berkeley.edu
cwen@iupui.edu
cwen@iupui.edu
cwen@iupui.edu
There were 27 lines in the file with From as the first word
~~~~

**Exercise 6: Rewrite the program that prompts the user for a list of
numbers and prints out the maximum and minimum of the numbers at the end
when the user enters "done". Write the program to store the numbers the
user enters in a list and use the `max()` and
`min()` functions to compute the maximum and minimum numbers
after the loop completes.**

~~~~{text}
Enter a number: 6
Enter a number: 2
Enter a number: 9
Enter a number: 3
Enter a number: 5
Enter a number: done
Maximum: 9.0
Minimum: 2.0
~~~~
