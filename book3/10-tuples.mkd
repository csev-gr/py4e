
Πλειάδες
========

Οι πλειάδες είναι αμετάβλητες
-----------------------------

\index{πλειάδες}
\index{τύπος!πλειάδες}
\index{ακολουθία}

Μια πλειάδα^[Ενδιαφέρουσα πληροφορία: Η λέξη "tuple (πλειάδα)" προέρχεται από
τα ονόματα που δίνονται σε ακολουθίες αριθμών διαφορετικού μήκους: μονή, διπλή,
τριπλή, τετραπλή, πενταπλή (quintuple), εξάπλη (sextuple), επταπλή (septuple),
κ.λπ.] είναι μια ακολουθία τιμών που μοιάζει πολύ με μια λίστα. Οι τιμές που
είναι αποθηκευμένες σε μια πλειάδα μπορούν να είναι οποιουδήποτε τύπου και
έχουν δείκτες ακέραιους αριθμούς. Η σημαντική διαφορά είναι ότι οι πλειάδες
είναι *αμετάβλητες*. Οι πλειάδες είναι επίσης *συγκρίσιμες* και
*κατακερματισμένες*, ώστε να μπορούμε να ταξινομήσουμε λίστες τους και να
χρησιμοποιήσουμε πλειάδες ως κλειδιά - τιμές σε λεξικά της Python.

\index{μεταβλητότητα}
\index{hashable}
\index{κατακερματιζόμενος}
\index{συγκρίσιμος-η-ο}
\index{αμεταβλητότητα}

Συντακτικά, μια πλειάδα είναι μια λίστα τιμών διαχωρισμένη με κόμματα:

~~~~ {.python}
>>> t = 'a', 'b', 'c', 'd', 'e'
~~~~

Αν και δεν είναι απαραίτητο, είναι σύνηθες να περικλείουμε τις πλειάδες σε
παρενθέσεις, για να βοηθηθούμε στο να αναγνωρίσουμε γρήγορα τις πλειάδες,
όταν κοιτάμε τον κώδικα Python:

\index{παρενθέσεις!πλειάδες σε}

~~~~ {.python}
>>> t = ('a', 'b', 'c', 'd', 'e')
~~~~

Για να δημιουργήσετε μια πλειάδα με ένα μόνο στοιχείο, πρέπει να συμπεριλάβετε
το τελικό κόμμα:

\index{µεµονωµένο}
\index{πλειάδα!µεµονωµένο}

~~~~ {.python .trinket}
>>> t1 = ('a',)
>>> type(t1)
<type 'tuple'>
~~~~

Χωρίς κόμμα, η Python αντιμετωπίζει το `('a')` ως έκφραση με μια συμβολοσειρά
σε παρένθεση, που αποτιμάται σε μια συμβολοσειρά:

~~~~ {.python}
>>> t2 = ('a')
>>> type(t2)
<type 'str'>
~~~~

Ένας άλλος τρόπος κατασκευής πλειάδας είναι η ενσωματωμένη συνάρτηση `tuple`.
Χωρίς όρισμα, δημιουργεί μια κενή πλειάδα:

\index{tuple συνάρτηση}
\index{συνάρτηση!tuple}

~~~~ {.python .trinket}
>>> t = tuple()
>>> print(t)
()
~~~~

Εάν το όρισμα είναι μια ακολουθία (συμβολοσειρά, λίστα ή πλειάδα), το
αποτέλεσμα της κλήσης της `tuple` είναι μια πλειάδα με τα στοιχεία της
ακολουθίας:

~~~~ {.python .trinket}
>>> t = tuple('lupins')
>>> print(t)
('l', 'u', 'p', 'i', 'n', 's')
~~~~

Επειδή το `tuple` είναι το όνομα ενός κατασκευαστή, θα πρέπει να αποφύγετε τη
χρήση του ως όνομα μεταβλητής.

Οι περισσότεροι τελεστές λιστών λειτουργούν και σε πλειάδες. Ο τελεστής αγκύλης
ευρετηριάζει ένα στοιχείο:

\index{αγκύλη τελεστής}
\index{τελεστής!αγκύλη}

~~~~ {.python .trinket}
>>> t = ('a', 'b', 'c', 'd', 'e')
>>> print(t[0])
'a'
~~~~

Και ο τελεστής διαμέρισης επιλέγει μια σειρά στοιχείων.

\index{διαμέριση τελεστής}
\index{τελεστής!διαμέριση}
\index{πλειάδα!διαμέριση}
\index{διαμέριση!πλειάδα}

~~~~ {.python}
>>> print(t[1:3])
('b', 'c')
~~~~

Αλλά αν προσπαθήσετε να τροποποιήσετε ένα από τα στοιχεία της πλειάδας,
λαμβάνετε ένα σφάλμα:

\index{εξαίρεση!TypeError}
\index{TypeError}
\index{στοιχείο εκχώρηση}
\index{εκχώρηση!στοιχείο}

~~~~ {.python}
>>> t[0] = 'A'
TypeError: object doesn't support item assignment
~~~~

Δεν μπορείτε να τροποποιήσετε τα στοιχεία μιας πλειάδας, αλλά μπορείτε να
αντικαταστήσετε μια πλειάδα με μια άλλη:

~~~~ {.python .trinket}
>>> t = ('A',) + t[1:]
>>> print(t)
('A', 'b', 'c', 'd', 'e')
~~~~

Σύγκριση πλειάδων
-----------------

\index{σύγκριση!πλειάδα}
\index{πλειάδα!σύγκριση}
\index{sort μέθοδος}
\index{μέθοδος!sort}

Οι τελεστές σύγκρισης λειτουργούν με πλειάδες και άλλες ακολουθίες. Η Python
ξεκινά συγκρίνοντας το πρώτο στοιχείο από κάθε ακολουθία. Αν είναι ίσα,
πηγαίνει στο επόμενο στοιχείο και ούτω καθεξής, μέχρι να βρει στοιχεία που
διαφέρουν. Τα επόμενα στοιχεία δεν λαμβάνονται υπόψη (ακόμα και αν είναι
πραγματικά μεγάλα).

~~~~ {.python .trinket}
>>> (0, 1, 2) < (0, 3, 4)
True
>>> (0, 1, 2000000) < (0, 3, 4)
True
~~~~

Η συνάρτηση `sort` λειτουργεί με τον ίδιο τρόπο. Ταξινομεί κυρίως κατά το
πρώτο στοιχείο, αλλά στην περίπτωση ισοπαλίας, ταξινομεί κατά το δεύτερο
στοιχείο και ούτω καθεξής.

Αυτό το χαρακτηριστικό προσφέρεται σε ένα μοτίβο που ονομάζεται *DSU* for

Decorate - Διακοσμώ
: μια ακολουθία δημιουργώντας μια λίστα πλειάδων με ένα ή περισσότερα κλειδιά
    ταξινόμησης που προηγούνται των στοιχείων των πλειάδων,

Sort - Ταξινομώ
: τη λίστα των πλειάδων, χρησιμοποιώντας την ενσωματωμένη `sort` της Python και

Undecorate - Αφαιρώ τη διακόσμηση
: εξάγοντας τα ταξινομημένα στοιχεία της ακολουθίας.

\index{DSU πρότυπο}
\index{πρότυπο!DSU}
\index{decorate-sort-undecorate πρότυπο}
\index{πρότυπο!decorate-sort-undecorate}
\index{Romeo and Juliet}
\index{Ρωμαίος και Ιουλιέτα}

Για παράδειγμα, ας υποθέσουμε ότι έχετε μια λίστα λέξεων και θέλετε να τις
ταξινομήσετε από αυτή με το μεγαλύτερο μήκος προς στη συντομότερη:

\VerbatimInput{../code3/soft.py}

Ο πρώτος βρόχος δημιουργεί μια λίστα με πλειάδες, όπου κάθε πλειάδα είναι μια
λέξη με προπορευόμενο το μήκος της.

Η `sort` συγκρίνει τα πρώτα στοιχεία των πλειάδων, το μήκος. Το όρισμα
δεμευμένης λέξης `reverse=True` λέει στην `sort` να λειτουργήσει με φθίνουσα
σειρά.

\index{δεμευμένη λέξη, όρισμα}
\index{όρισμα!δεμευμένη λέξη}
\index{διάσχιση}

Ο δεύτερος βρόχος διασχίζει τη λίστα των πλειάδων και δημιουργεί μια λίστα
λέξεων με φθίνουσα σειρά μήκους. Οι λέξεις των τεσσάρων χαρακτήρων
ταξινομούνται με *αντίστροφη* αλφαβητική σειρά, επομένως το "what" εμφανίζεται
πριν από το "soft" στην παρακάτω λίστα.

Η έξοδος του προγράμματος είναι η εξής:

~~~~{text}
['yonder', 'window', 'breaks', 'light', 'what', 'soft', 'but', 'in']
~~~~

Φυσικά η γραμμή χάνει μεγάλο μέρος του ποιητικού της αντίκτυπου όταν μετατραπεί
σε λίστα Python και ταξινομηθεί σε φθίνουσα σειρά μήκους λέξεων.

Εκχώρηση τιμής σε πλειάδα
-------------------------

\index{πλειάδα!εκχώρηση τιμής}
\index{εκχώρηση τιμής!πλειάδα}
\index{αντιμετάθεση μοτίβο}
\index{μοτίβο!αντιμετάθεση}

Ένα από τα μοναδικά συντακτικά χαρακτηριστικά της γλώσσας Python είναι η
δυνατότητα να υπάρχει πλειάδα στην αριστερή πλευρά μιας δήλωσης ανάθεσης. Αυτό
σας επιτρέπει να εκχωρήσετε τιμή σε περισσότερες από μία μεταβλητές τη φορά
όταν το αριστερό μέλος είναι μια ακολουθία.

Σε αυτό το παράδειγμα έχουμε μια λίστα δύο στοιχείων (η οποία είναι μια
ακολουθία) και εκχωρούμε το πρώτο και το δεύτερο στοιχείο της ακολουθίας στις
μεταβλητές `x` και `y` σε μία μόνο πρόταση.

~~~~ {.python .trinket}
>>> m = [ 'have', 'fun' ]
>>> x, y = m
>>> x
'have'
>>> y
'fun'
>>>
~~~~

It is not magic, Python *roughly* translates the tuple assignment syntax
to be the following:^[Python does not translate the syntax literally. For example, if
you try this with a dictionary, it will not work as you might expect.]

~~~~ {.python .trinket}
>>> m = [ 'have', 'fun' ]
>>> x = m[0]
>>> y = m[1]
>>> x
'have'
>>> y
'fun'
>>>
~~~~

Stylistically when we use a tuple on the left side of the assignment
statement, we omit the parentheses, but the following is an equally
valid syntax:

~~~~ {.python}
>>> m = [ 'have', 'fun' ]
>>> (x, y) = m
>>> x
'have'
>>> y
'fun'
>>>
~~~~

A particularly clever application of tuple assignment allows us to
*swap* the values of two variables in a single statement:

~~~~ {.python}
>>> a, b = b, a
~~~~

Both sides of this statement are tuples, but the left side is a tuple of
variables; the right side is a tuple of expressions. Each value on the
right side is assigned to its respective variable on the left side. All
the expressions on the right side are evaluated before any of the
assignments.

The number of variables on the left and the number of values on the
right must be the same:

\index{exception!ValueError}
\index{ValueError}

~~~~ {.python}
>>> a, b = 1, 2, 3
ValueError: too many values to unpack
~~~~

More generally, the right side can be any kind of sequence (string,
list, or tuple). For example, to split an email address into a user name
and a domain, you could write:

\index{split method}
\index{method!split}
\index{email address}

~~~~ {.python}
>>> addr = 'monty@python.org'
>>> uname, domain = addr.split('@')
~~~~

The return value from `split` is a list with two elements;
the first element is assigned to `uname`, the second to
`domain`.

~~~~ {.python}
>>> print(uname)
monty
>>> print(domain)
python.org
~~~~

Dictionaries and tuples
-----------------------

\index{dictionary}
\index{items method}
\index{method!items}
\index{key-value pair}

Dictionaries have a method called `items` that returns a list
of tuples, where each tuple is a key-value pair:

~~~~ {.python .trinket}
>>> d = {'a':10, 'b':1, 'c':22}
>>> t = list(d.items())
>>> print(t)
[('b', 1), ('a', 10), ('c', 22)]
~~~~

As you should expect from a dictionary, the items are in no particular
order.

However, since the list of tuples is a list, and tuples are comparable,
we can now sort the list of tuples. Converting a dictionary to a list of
tuples is a way for us to output the contents of a dictionary sorted by
key:

~~~~ {.python}
>>> d = {'a':10, 'b':1, 'c':22}
>>> t = list(d.items())
>>> t
[('b', 1), ('a', 10), ('c', 22)]
>>> t.sort()
>>> t
[('a', 10), ('b', 1), ('c', 22)]
~~~~

The new list is sorted in ascending alphabetical order by the key value.

Multiple assignment with dictionaries
-------------------------------------

\index{traverse!dictionary}
\index{dictionary!traversal}

Combining `items`, tuple assignment, and `for`,
you can see a nice code pattern for traversing the keys and values of a
dictionary in a single loop:

~~~~ {.python}
for key, val in list(d.items()):
    print(val, key)
~~~~

This loop has two *iteration variables* because
`items` returns a list of tuples and `key, val` is
a tuple assignment that successively iterates through each of the
key-value pairs in the dictionary.

For each iteration through the loop, both `key` and
`value` are advanced to the next key-value pair in the
dictionary (still in hash order).

The output of this loop is:

~~~~{text}
10 a
22 c
1 b
~~~~

Again, it is in hash key order (i.e., no particular order).

If we combine these two techniques, we can print out the contents of a
dictionary sorted by the *value* stored in each key-value pair.

To do this, we first make a list of tuples where each tuple is
`(value, key)`. The `items` method would give us a
list of `(key, value)` tuples, but this time we want to sort
by value, not key. Once we have constructed the list with the value-key
tuples, it is a simple matter to sort the list in reverse order and
print out the new, sorted list.

~~~~ {.python}
>>> d = {'a':10, 'b':1, 'c':22}
>>> l = list()
>>> for key, val in d.items() :
...     l.append( (val, key) )
...
>>> l
[(10, 'a'), (22, 'c'), (1, 'b')]
>>> l.sort(reverse=True)
>>> l
[(22, 'c'), (10, 'a'), (1, 'b')]
>>>
~~~~

By carefully constructing the list of tuples to have the value as the
first element of each tuple, we can sort the list of tuples and get our
dictionary contents sorted by value.

The most common words
---------------------

\index{Romeo and Juliet}

Coming back to our running example of the text from *Romeo and Juliet*
Act 2, Scene 2, we can augment our program to use this technique to
print the ten most common words in the text as follows:

\VerbatimInput{../code3/count3.py} 
\begin{trinketfiles}
../code3/romeo-full.txt
\end{trinketfiles}

The first part of the program which reads the file and computes the
dictionary that maps each word to the count of words in the document is
unchanged. But instead of simply printing out `counts` and
ending the program, we construct a list of `(val, key)`
tuples and then sort the list in reverse order.

Since the value is first, it will be used for the comparisons. If there
is more than one tuple with the same value, it will look at the second
element (the key), so tuples where the value is the same will be further
sorted by the alphabetical order of the key.

At the end we write a nice `for` loop which does a multiple
assignment iteration and prints out the ten most common words by
iterating through a slice of the list (`lst[:10]`).

So now the output finally looks like what we want for our word frequency
analysis.

~~~~{text}
61 i
42 and
40 romeo
34 to
34 the
32 thou
32 juliet
30 that
29 my
24 thee
~~~~

The fact that this complex data parsing and analysis can be done with an
easy-to-understand 19-line Python program is one reason why Python is a
good choice as a language for exploring information.

Using tuples as keys in dictionaries
------------------------------------

\index{tuple!as key in dictionary}
\index{hashable}

Because tuples are *hashable* and lists are not, if we
want to create a *composite* key to use in a dictionary
we must use a tuple as the key.

We would encounter a composite key if we wanted to create a telephone
directory that maps from last-name, first-name pairs to telephone
numbers. Assuming that we have defined the variables `last`,
`first`, and `number`, we could write a dictionary
assignment statement as follows:

~~~~ {.python}
directory[last,first] = number
~~~~

The expression in brackets is a tuple. We could use tuple assignment in
a `for` loop to traverse this dictionary.

\index{tuple!in brackets}

~~~~ {.python}
for last, first in directory:
    print(first, last, directory[last,first])
~~~~

This loop traverses the keys in `directory`, which are
tuples. It assigns the elements of each tuple to `last` and
`first`, then prints the name and corresponding telephone
number.

Sequences: strings, lists, and tuples - Oh My!
--------------------------------------------

\index{sequence}

I have focused on lists of tuples, but almost all of the examples in
this chapter also work with lists of lists, tuples of tuples, and tuples
of lists. To avoid enumerating the possible combinations, it is
sometimes easier to talk about sequences of sequences.

In many contexts, the different kinds of sequences (strings, lists, and
tuples) can be used interchangeably. So how and why do you choose one
over the others?

\index{string}
\index{list}
\index{tuple}
\index{mutability}
\index{immutability}

To start with the obvious, strings are more limited than other sequences
because the elements have to be characters. They are also immutable. If
you need the ability to change the characters in a string (as opposed to
creating a new string), you might want to use a list of characters
instead.

Lists are more common than tuples, mostly because they are mutable. But
there are a few cases where you might prefer tuples:

1.  In some contexts, like a `return` statement, it is
    syntactically simpler to create a tuple than a list. In other
    contexts, you might prefer a list.

2.  If you want to use a sequence as a dictionary key, you have to use
    an immutable type like a tuple or string.

3.  If you are passing a sequence as an argument to a function, using
    tuples reduces the potential for unexpected behavior due to
    aliasing.

Because tuples are immutable, they don't provide methods like
`sort` and `reverse`, which modify existing lists.
However Python provides the built-in functions `sorted` and
`reversed`, which take any sequence as a parameter and return
a new sequence with the same elements in a different order.

\index{sorted function}
\index{function!sorted}
\index{reversed function}
\index{function!reversed}

List comprehension
------------------

Sometimes you want to create a sequence by using data from another sequence.
You can achieve this by writing a for loop and appending one item at a time.
For example, if you wanted to convert a list of strings -- each string storing digits
-- into numbers that you can sum up, you would write:

~~~~ {.python}
list_of_ints_in_strings = ['42', '65', '12']
list_of_ints = []
for x in list_of_ints_in_strings:
    list_of_ints.append(int(x))

print(sum(list_of_ints))
~~~~

With list comprehension, the above code can be written in a more compact manner:

~~~~ {.python}
list_of_ints_in_strings = ['42', '65', '12']
list_of_ints = [ int(x) for x in list_of_ints_in_strings ]
print(sum(list_of_ints))
~~~~

\index{list comprehension}

Debugging
---------

\index{debugging}
\index{data structure}
\index{shape error}
\index{error!shape}

Lists, dictionaries and tuples are known generically as *data
structures*; in this chapter we are starting to see compound
data structures, like lists of tuples, and dictionaries that contain
tuples as keys and lists as values. Compound data structures are useful,
but they are prone to what I call *shape errors*; that
is, errors caused when a data structure has the wrong type, size, or
composition, or perhaps you write some code and forget the shape of your
data and introduce an error. For example, if you are expecting a list with one integer and I give you a plain old integer (not in a list), it won't work.

Glossary
--------

comparable
:   A type where one value can be checked to see if it is greater than,
    less than, or equal to another value of the same type. Types which
    are comparable can be put in a list and sorted.
\index{comparable}

data structure
:   A collection of related values, often organized in lists,
    dictionaries, tuples, etc.
\index{data structure}

DSU
:   Abbreviation of "decorate-sort-undecorate", a pattern that involves
    building a list of tuples, sorting, and extracting part of the
    result.
\index{DSU pattern}

gather
:   The operation of assembling a variable-length argument tuple.
\index{gather}

hashable
:   A type that has a hash function. Immutable types like integers,
    floats, and strings are hashable; mutable types like lists and
    dictionaries are not.
\index{hashable}

scatter
:   The operation of treating a sequence as a list of arguments.
\index{scatter}

shape (of a data structure)
:   A summary of the type, size, and composition of a data structure.
\index{shape}

singleton
:   A list (or other sequence) with a single element.
\index{singleton}

tuple
:   An immutable sequence of elements.
\index{tuple}

tuple assignment
:   An assignment with a sequence on the right side and a tuple of
    variables on the left. The right side is evaluated and then its
    elements are assigned to the variables on the left.
\index{tuple assignment}
\index{assignment!tuple}

Exercises
---------

**Exercise 1: Revise a previous program as follows: Read and parse the
"From " lines and pull out the addresses from the line. Count the number
of messages from each person using a dictionary.**

**After all the data has been read, print the person with the most commits
by creating a list of (count, email) tuples from the dictionary. Then
sort the list in reverse order and print out the person who has the most
commits.**

~~~~{text}
Sample Line:
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008

Enter a file name: mbox-short.txt
cwen@iupui.edu 5

Enter a file name: mbox.txt
zqian@umich.edu 195
~~~~

**Exercise 2: This program counts the distribution of the hour of the day
for each of the messages. You can pull the hour from the "From " line by
finding the time string and then splitting that string into parts using
the colon character. Once you have accumulated the counts for each hour,
print out the counts, one per line, sorted by hour as shown below.**

~~~~{text}
python timeofday.py
Enter a file name: mbox-short.txt
04 3
06 1
07 1
09 2
10 3
11 6
14 1
15 2
16 4
17 2
18 1
19 1
~~~~

**Exercise 3: Write a program that reads a file and prints the
*letters* in decreasing order of frequency. Your program
should convert all the input to lower case and only count the letters
a-z. Your program should not count spaces, digits, punctuation, or
anything other than the letters a-z. Find text samples from several
different languages and see how letter frequency varies between
languages. Compare your results with the tables at
<https://wikipedia.org/wiki/Letter_frequencies>.**

\index{letter frequency}
\index{frequency!letter}
